---
- name: "HIGH | xccdf_hdf_group_KEYC-01-000022_part1 | AUDIT | Keycloak must be configured to use secure protocols when connecting to directory services."
  blockinfile:
    path: /opt/keycloak/conf/keycloak.conf
    block: |
      hostname-strict-https=true
      https-client-auth=required
    state: present
    create: yes
    marker: "# {mark} ANSIBLE MANAGED BLOCK - PROTOCOLS"
  register: result
  check_mode: no
  changed_when: no
  ignore_errors: yes
  tags:
    - cat1
    - high
    - xccdf_hdf_group_KEYC-01-000022
    - audit

- name: "HIGH | xccdf_hdf_group_KEYC-01-000022_part2 | AUDIT | Keycloak must be configured to use secure protocols when connecting to directory services."
  blockinfile:
    path: /opt/keycloak/conf/keycloak.conf
    block: |
      https-trust-store-file={{https_truststore_file_path}}
      https-trust-store-password=
      {{security_option}}
    state: present
    create: yes
    marker: "# {mark} ANSIBLE MANAGED BLOCK - HTTPS TRUST STORE"
  register: result
  check_mode: no
  changed_when: no
  ignore_errors: yes
  tags:
    - cat1
    - high
    - xccdf_hdf_group_KEYC-01-000022
    - audit

#- name: "HIGH | xccdf_hdf_group_KEYC-01-000022 | PATCH | Keycloak must be configured to use secure protocols when connecting to directory services."
#  shell:
#  tags:
#    - cat1
#    - high
#    - xccdf_hdf_group_KEYC-01-000022
#    - patch

- name: "HIGH | xccdf_hdf_group_KEYC-01-000023_part1 | AUDIT | Keycloak must be configured to use protocols that encrypt credentials when authenticating clients, as defined in the PPSM CAL and vulnerability assessments."
  shell: >
    {{path}}kcadm.sh update realms/{{keycloak_realm}} -s "passwordPolicy='hashAlgorithm(pbkdf2-sha256)'"
  register: result
  check_mode: no
  changed_when: no
  ignore_errors: yes
  tags:
    - cat1
    - high
    - xccdf_hdf_group_KEYC-01-000023
    - audit

- name: "HIGH | xccdf_hdf_group_KEYC-01-000023_part2 | AUDIT | Keycloak must be configured to use protocols that encrypt credentials when authenticating clients, as defined in the PPSM CAL and vulnerability assessments."
  blockinfile:
    path: /opt/keycloak/conf/keycloak.conf
    block: |
      cache=ispn
      cache-stack=tcp
    state: present
    create: yes
    marker: "# {mark} ANSIBLE MANAGED BLOCK - CACHE"
  register: result
  check_mode: no
  changed_when: no
  ignore_errors: yes
  tags:
    - cat1
    - high
    - xccdf_hdf_group_KEYC-01-000023
    - audit

#- name: "HIGH | xccdf_hdf_group_KEYC-01-000023 | PATCH | Keycloak must be configured to use protocols that encrypt credentials when authenticating clients, as defined in the PPSM CAL and vulnerability assessments."
#  shell:
#  tags:
#    - cat1
#    - high
#    - xccdf_hdf_group_KEYC-01-000023
#    - patch

- name: "HIGH | xccdf_hdf_group_KEYC-01-000025_part1 | AUDIT | Keycloak must be configured to uniquely identify and authenticate organizational users."
  shell: >
    {{path}}kcadm.sh create roles -r {{keycloak_realm}} -s name={{role_policy_name}} -s 'description={{role_policy_description}}'
  register: result
  check_mode: no
  changed_when: no
  ignore_errors: yes
  tags:
    - cat1
    - high
    - xccdf_hdf_group_KEYC-01-000025
    - audit

- name: "HIGH | xccdf_hdf_group_KEYC-01-000025_part2 | AUDIT | Keycloak must be configured to uniquely identify and authenticate organizational users."
  shell: >
    {{path}}kcadm.sh add-roles --uusername {{user_name}} --rolename {{role_policy_name}} -r {{keycloak_realm}}
  register: result
  check_mode: no
  changed_when: no
  ignore_errors: yes
  tags:
    - cat1
    - high
    - xccdf_hdf_group_KEYC-01-000025
    - audit

#- name: "HIGH | xccdf_hdf_group_KEYC-01-000025 | PATCH | Keycloak must be configured to uniquely identify and authenticate organizational users."
#  shell:
#  tags:
#    - cat1
#    - high
#    - xccdf_hdf_group_KEYC-01-000025
#    - patch

- name: "HIGH | xccdf_hdf_group_KEYC-01-000036 | AUDIT | Keycloak must be configured to encrypt locally stored credentials using a FIPS-validated cryptographic module."
  shell: >
    {{path}}kcadm.sh update realms/{{keycloak_realm}} -s "passwordPolicy='hashAlgorithm(pbkdf2-sha256)'"
  register: result
  check_mode: no
  changed_when: no
  ignore_errors: yes
  tags:
    - cat1
    - high
    - xccdf_hdf_group_KEYC-01-000036
    - audit

#- name: "HIGH | xccdf_hdf_group_KEYC-01-000036 | PATCH | Keycloak must be configured to encrypt locally stored credentials using a FIPS-validated cryptographic module."
#  shell:
#  tags:
#    - cat1
#    - high
#    - xccdf_hdf_group_KEYC-01-000036
#    - patch

- name: "HIGH | xccdf_hdf_group_KEYC-01-000040_part1 | AUDIT | Keycloak must be configured to only accept certificates issued by a DoD-approved Certificate Authority for PKI-based authentication."
  blockinfile:
    path: /opt/keycloak/conf/keycloak.conf
    block: |
      hostname-strict-https=true
      https-client-auth=required
    state: present
    create: yes
    marker: "# {mark} ANSIBLE MANAGED BLOCK - PROTOCOLS"
  register: result
  check_mode: no
  changed_when: no
  ignore_errors: yes
  tags:
    - cat1
    - high
    - xccdf_hdf_group_KEYC-01-000040
    - audit

- name: "HIGH | xccdf_hdf_group_KEYC-01-000040_part2 | AUDIT | Keycloak must be configured to only accept certificates issued by a DoD-approved Certificate Authority for PKI-based authentication."
  blockinfile:
    path: /opt/keycloak/conf/keycloak.conf
    block: |
      spi-truststore-file-file={{spi_trust_store_file_path}}
      spi-truststore-file-password=
      spi-truststore-file-hostname-verification-policy={{spi_trust_store_policy}}
    state: present
    create: yes
    marker: "# {mark} ANSIBLE MANAGED BLOCK - SPI TRUST STORE"
  register: result
  check_mode: no
  changed_when: no
  ignore_errors: yes
  tags:
    - cat1
    - high
    - xccdf_hdf_group_KEYC-01-000040
    - audit

# TODO: inspect issuer

#- name: "HIGH | xccdf_hdf_group_KEYC-01-000040 | PATCH | Keycloak must be configured to only accept certificates issued by a DoD-approved Certificate Authority for PKI-based authentication."
#  shell:
#  tags:
#    - cat1
#    - high
#    - xccdf_hdf_group_KEYC-01-000040
#    - patch

- name: "HIGH | xccdf_hdf_group_KEYC-01-000041 | AUDIT | Keycloak must be configured to not accept certificates that have been revoked for PKI-based authentication."
  block:
    - name: get current browser flows
      shell: >
        {{path}}kcadm.sh get authentication/flows/browser/executions
      register: initial_browser_flows
      ignore_errors: no

    - name: set initial browser flows in json
      set_fact:
        initial_json_browser_flows: "{{ initial_browser_flows.stdout | from_json | community.general.json_query('[*]') }}"

    - debug:
        msg: initial browser flows="{{initial_json_browser_flows}}"

    - name: set initial browser flows' providerIds to array
      set_fact:
        initial_browser_provider_ids: "{{ initial_json_browser_flows | community.general.json_query('[*].providerId') }}"

    - debug:
        msg: "{{initial_browser_provider_ids}}"

    # The following is executed on the condition that ... was not found
    - name: get current authentication flows
      shell: >
        {{path}}kcadm.sh get authentication/flows
      register: initial_flows
      when: '"auth-x509-client-username-form" not in initial_browser_provider_ids'
      ignore_errors: no

    - name: set initial flows in json
      set_fact:
        initial_json_flows: "{{ initial_flows.stdout | from_json | community.general.json_query('[*]') }}"
      when: '"auth-x509-client-username-form" not in initial_browser_provider_ids'

    - debug:
        msg: initial flows="{{initial_json_flows}}"
      when: '"auth-x509-client-username-form" not in initial_browser_provider_ids'

    - name: set initial flows' ids to array
      set_fact:
        initial_ids: "{{ initial_json_flows | community.general.json_query('[*].id') }}"
      when: '"auth-x509-client-username-form" not in initial_browser_provider_ids'

    - debug:
        msg: "{{initial_ids}}"
      when: '"auth-x509-client-username-form" not in initial_browser_provider_ids'

    - name: create a copy of browser authentication flow
      shell: |
        {{path}}kcadm.sh create authentication/flows/browser/copy -s \"providerId\"=\"basic_flow\"
        {{path}}kcadm.sh get authentication/flows
      when: '"auth-x509-client-username-form" not in initial_browser_provider_ids'
      register: new_flows
      check_mode: no
      changed_when: no
      ignore_errors: no

    - name: set new flows in json
      set_fact:
        new_json_flows: "{{ new_flows.stdout | from_json | community.general.json_query('[*]') }}"
      when: '"auth-x509-client-username-form" not in initial_browser_provider_ids'

    - debug:
        msg: "{{new_json_flows}}"
      when: '"auth-x509-client-username-form" not in initial_browser_provider_ids'

    - name: new flows' ids to array
      set_fact:
        new_ids: "{{ new_json_flows | community.general.json_query('[*].id') }}"
      when: '"auth-x509-client-username-form" not in initial_browser_provider_ids'

    - debug:
        msg: "{{new_ids}}"
      when: '"auth-x509-client-username-form" not in initial_browser_provider_ids'

    - name: display authentication flow id differences
      ansible.utils.fact_diff:
        before: "{{initial_ids}}"
        after: "{{new_ids}}"
      when: '"auth-x509-client-username-form" not in initial_browser_provider_ids'

    - debug:
        msg: "new id: {{ new_ids | difference(initial_ids) | list }}"
      when: '"auth-x509-client-username-form" not in initial_browser_provider_ids'

    - name: set variable for new flow id
      set_fact:
        new_id: "{{ new_ids | difference(initial_ids) | list }}"
      when: '"auth-x509-client-username-form" not in initial_browser_provider_ids'

    - name: update new flow's alias
      shell: |
        {{path}}kcadm.sh update authentication/flows/{{new_id.0}} -s \"alias\"=\"flow_alias\"
      ignore_errors: no
      when: '"auth-x509-client-username-form" not in initial_browser_provider_ids'

    - name: update new flow's execution
      shell: |
        {{path}}kcadm.sh create authentication/flows/flow_alias/executions/execution -s \"provider\"=\"auth-x509-client-username-form\"
      ignore_errors: no
      when: '"auth-x509-client-username-form" not in initial_browser_provider_ids'

    - name: get new flows execution
      shell: |
        {{path}}kcadm.sh get authentication/flows/flow_alias/executions
      register: custom_flow
      ignore_errors: no
      when: '"auth-x509-client-username-form" not in initial_browser_provider_ids'

    - name: set new flow in json
      set_fact:
        custom_json_flow: "{{ custom_flow.stdout | from_json | community.general.json_query('[*]') }}"
      when: '"auth-x509-client-username-form" not in initial_browser_provider_ids'

    - debug:
        msg: custom flow="{{custom_json_flow}}"
      when: '"auth-x509-client-username-form" not in initial_browser_provider_ids'

    - name: get x509 execution id
      set_fact:
        loop: "{{ custom_json_flow | community.general.json_query(x509_id_query) }}"
      vars:
        x509_id_query: "[?providerId=='auth-x509-client-username-form'].id"
      register: x509_id
      when: '"auth-x509-client-username-form" not in initial_browser_provider_ids'

    - name: display x509 execution id
      debug:
        var: item
      loop: "{{ custom_json_flow | community.general.json_query(x509_id_query) }}"
      vars:
        x509_id_query: "[?providerId=='auth-x509-client-username-form'].id"
      when: '"auth-x509-client-username-form" not in initial_browser_provider_ids'

  #    - name:
  tags:
    - cat1
    - high
    - xccdf_hdf_group_KEYC-01-000041
    - audit

#- name: "HIGH | xccdf_hdf_group_KEYC-01-000041 | PATCH | Keycloak must be configured to not accept certificates that have been revoked for PKI-based authentication."
#  shell:
#  tags:
#    - cat1
#    - high
#    - xccdf_hdf_group_KEYC-01-000041
#    - patch
#
