---
- name: Create a list variable for enabledEventTypes
  # TODO: Do I need to fetch existing enabledEventTypes first?
  ansible.builtin.set_fact:
    enabled_event_types_list: []
#- name: enabled_event_types list to string
#  ansible.builtin.set_fact:
#    enabledEventTypes: "{{ '[ ' + enabled_event_types_list | join(', ') + ' ]' }}"

- name: MEDIUM | xccdf_hdf_group_KEYC-01-000005 | Keycloak must be configured to automatically audit account creation.
  block:
    - name: Configure to audit account creation
      ansible.builtin.shell: >
        {{ path }}kcadm.sh update events/config -r {{ keycloak_realm }} -s adminEventsEnabled=true
        -s adminEventsDetailsEnabled=true -s eventsEnabled=true -s 'eventsListeners=["jboss-logging"]'
      register: result
      check_mode: false
      changed_when: false
      ignore_errors: true

    - name: Update enabled_event_types_list
      ansible.builtin.set_fact:
        enabled_event_types_list: "{{ enabled_event_types_list | union(['REGISTER']) | unique }}"
  when: xccdf_hdf_group_KEYC_01_000005
  tags:
    - cat2
    - medium
    - xccdf_hdf_group_KEYC-01-000005

- name: MEDIUM | xccdf_hdf_group_KEYC-01-000006 | Keycloak must be configured to automatically audit account modification.
  block:
    - name: Configure to audit account modification
      ansible.builtin.shell: >
        {{ path }}kcadm.sh update events/config -r {{ keycloak_realm }} -s adminEventsEnabled=true  -s adminEventsDetailsEnabled=true -s eventsEnabled=true -s 'eventsListeners=["jboss-logging"]'
      register: result
      check_mode: false
      changed_when: false
      ignore_errors: true

    - name: Update enabled_event_types_list
      ansible.builtin.set_fact:
        enabled_event_types_list: "{{ enabled_event_types_list | union(['UPDATE_PROFILE', 'UPDATE_EMAIL', 'UPDATE_PASSWORD']) | unique }}"
  when: xccdf_hdf_group_KEYC_01_000006
  tags:
    - cat2
    - medium
    - xccdf_hdf_group_KEYC-01-000006

- name: MEDIUM | xccdf_hdf_group_KEYC-01-000007 | Keycloak must be configured to automatically audit account disabling actions.
  ansible.builtin.shell: >
    {{ path }}kcadm.sh update events/config -r {{ keycloak_realm }} -s adminEventsEnabled=true  -s adminEventsDetailsEnabled=true -s 'eventsListeners=["jboss-logging"]'
  register: result
  check_mode: false
  changed_when: false
  ignore_errors: true
  when: xccdf_hdf_group_KEYC_01_000007
  tags:
    - cat2
    - medium
    - xccdf_hdf_group_KEYC-01-000007

- name: MEDIUM | xccdf_hdf_group_KEYC-01-000008 | Keycloak must be configured to automatically audit account removal actions.
  block:
    - name: Configure to audit account removal
      ansible.builtin.shell: >
        {{ path }}kcadm.sh update events/config -r {{ keycloak_realm }} -s adminEventsEnabled=true  -s adminEventsDetailsEnabled=true -s eventsEnabled=true -s 'eventsListeners=["jboss-logging"]'
      register: result
      check_mode: false
      changed_when: false
      ignore_errors: true

    - name: Update enabled_event_types_list
      ansible.builtin.set_fact:
        enabled_event_types_list: "{{ enabled_event_types_list | union(['DELETE_ACCOUNT']) | unique }}"
  when: xccdf_hdf_group_KEYC_01_000008
  tags:
    - cat2
    - medium
    - xccdf_hdf_group_KEYC-01-000008

- name: MEDIUM | xccdf_hdf_group_KEYC-01-000009 | Keycloak must be configured to automatically lock user accounts after three consecutive invalid logon attempts
    within a 15-minute time period.
  ansible.builtin.shell: |
    {{ path }}kcadm.sh update realms/{{ keycloak_realm }} -s 'bruteForceProtected=true'
    {{ path }}kcadm.sh update realms/{{ keycloak_realm }} -s 'failureFactor={{ failure_factor }}'
    {{ path }}kcadm.sh update realms/{{ keycloak_realm }} -s 'maxDeltaTimeSeconds={{ max_delta_time_seconds }}'
  register: result
  check_mode: false
  changed_when: false
  ignore_errors: true
  when: xccdf_hdf_group_KEYC_01_000009
  tags:
    - cat2
    - medium
    - xccdf_hdf_group_KEYC-01-000009

- name: MEDIUM | xccdf_hdf_group_KEYC-01-000010 | Keycloak must be configured to audit each authentication and authorization transaction.
  ansible.builtin.shell: >
    {{ path }}kcadm.sh update events/config -r {{ keycloak_realm }} -s adminEventsEnabled=true  -s adminEventsDetailsEnabled=true -s eventsEnabled=true -s 'eventsListeners=["jboss-logging"]'
  register: result
  check_mode: false
  changed_when: false
  ignore_errors: true
  when: xccdf_hdf_group_KEYC_01_000010
  tags:
    - cat2
    - medium
    - xccdf_hdf_group_KEYC-01-000010
    

# TODO: need to determine appropriate event types
#- name: xccdf_hdf_group_KEYC-01-000010 | Update enabled_event_types list
#  ansible.builtin.set_fact:
#        enabled_event_types_list: "{{ enabled_event_types_list | union(['']) |unique }}"
#  when: xccdf_hdf_group_KEYC_01_000010
#  tags:
#    - cat2
#    - medium
#    - xccdf_hdf_group_KEYC-01-000010
#    

# TODO: enabledEventTypes part probably isn't correct here
- name: MEDIUM | xccdf_hdf_group_KEYC-01-000011 | Keycloak configuration audit records must identify what type of events occurred.
  ansible.builtin.shell: >
    {{ path }}kcadm.sh update events/config -r {{ keycloak_realm }} -s adminEventsEnabled=true  -s adminEventsDetailsEnabled=true -s eventsEnabled=true -s 'eventsListeners=["jboss-logging"]'
    -s 'enabledEventTypes={{ enabled_event_types_string }}'
  register: result
  check_mode: false
  changed_when: false
  ignore_errors: true
  when: xccdf_hdf_group_KEYC_01_000011
  tags:
    - cat2
    - medium
    - xccdf_hdf_group_KEYC-01-000011

# TODO: enabledEventTypes part probably isn't correct here
- name: MEDIUM | xccdf_hdf_group_KEYC-01-000012 | Keycloak configuration audit records must identify when (date and time) the events occurred.
  block:
    - name: Configure to audit date and time of event occurrence
      ansible.builtin.shell: >
        {{ path }}kcadm.sh update events/config -r {{ keycloak_realm }} -s adminEventsEnabled=true
        -s adminEventsDetailsEnabled=true -s eventsEnabled=true -s 'eventsListeners=["jboss-logging"]'
        -s 'enabledEventTypes={{ enabled_event_types_string }}'
      register: result
      check_mode: false
      changed_when: false
      ignore_errors: true

    - name: Set log console format in keycloak.conf
      lineinfile:
        path: "{{ keycloak_home }}/conf/keycloak.conf"
        regexp: ^log-console-format
        line: log-console-format={{ log_console_format }}
        state: present
        create: true
      register: result
      check_mode: false
      changed_when: false
      ignore_errors: true
  when: xccdf_hdf_group_KEYC_01_000012
  tags:
    - cat2
    - medium
    - xccdf_hdf_group_KEYC-01-000012

- name: MEDIUM | xccdf_hdf_group_KEYC-01-000013 | Keycloak configuration audit records must identify where the events occurred.
  ansible.builtin.shell: >
    {{ path }}kcadm.sh update events/config -r {{ keycloak_realm }} -s adminEventsEnabled=true
    -s adminEventsDetailsEnabled=true -s eventsEnabled=true -s 'eventsListeners=["jboss-logging"]'
  register: result
  check_mode: false
  changed_when: false
  ignore_errors: true
  when: xccdf_hdf_group_KEYC_01_000013
  tags:
    - cat2
    - medium
    - xccdf_hdf_group_KEYC-01-000013

- name: MEDIUM | xccdf_hdf_group_KEYC-01-000014 | Keycloak configuration audit records must identify the source of the events.
  ansible.builtin.shell: >
    {{ path }}kcadm.sh update events/config -r {{ keycloak_realm }} -s adminEventsEnabled=true
    -s adminEventsDetailsEnabled=true -s eventsEnabled=true -s 'eventsListeners=["jboss-logging"]'
  register: result
  check_mode: false
  changed_when: false
  ignore_errors: true
  tags:
    - cat2
    - medium
    - xccdf_hdf_group_KEYC-01-000014

# TODO: enabledEventTypes part probably isn't correct here
- name: MEDIUM | xccdf_hdf_group_KEYC-01-000015 | Keycloak configuration audit records must identify the outcome of the events.
  ansible.builtin.shell: >
    {{ path }}kcadm.sh update events/config -r {{ keycloak_realm }} -s adminEventsEnabled=true
    -s adminEventsDetailsEnabled=true -s eventsEnabled=true -s 'eventsListeners=["jboss-logging"]'
    -s 'enabledEventTypes={{ enabled_event_types_string }}'
  register: result
  check_mode: false
  changed_when: false
  ignore_errors: true
  when: xccdf_hdf_group_KEYC_01_000015
  tags:
    - cat2
    - medium
    - xccdf_hdf_group_KEYC-01-000015

- name: MEDIUM | xccdf_hdf_group_KEYC-01-000016 | Keycloak configuration audit records must identify any individual user or process associated with the event.
  ansible.builtin.shell: >
    {{ path }}kcadm.sh update events/config -r {{ keycloak_realm }} -s eventsEnabled=true -s 'eventsListeners=["jboss-logging"]'
  register: result
  check_mode: false
  changed_when: false
  ignore_errors: true
  when: xccdf_hdf_group_KEYC_01_000016
  tags:
    - cat2
    - medium
    - xccdf_hdf_group_KEYC-01-000016

# TODO: enabledEventTypes part probably isn't correct here
- name: MEDIUM | xccdf_hdf_group_KEYC-01-000017 | Keycloak must be configured to alert the SA and ISSO when any audit processing failure occurs.
  block:
    - name: Configure alerts to SA and ISSO upon audit processing failure
      ansible.builtin.shell: >
        {{ path }}kcadm.sh update events/config -r {{ keycloak_realm }} -s eventsEnabled=true -s 'eventsListeners=["jboss-logging"]'
        -s 'enabledEventTypes={{ enabled_event_types_string }}'
      register: result
      check_mode: false
      changed_when: false
      ignore_errors: true

    - name: Set spi events in keycloak.conf
      ansible.builtin.blockinfile:
        path: "{{ keycloak_home }}/conf/keycloak.conf"
        block: |
          spi-events-listener-jboss-logging-success-level=info
          spi-events-listener-jboss-logging-error-level=error
        state: present
        create: true
        marker: "# {mark} ANSIBLE MANAGED BLOCK - SPI EVENTS"
      register: result
      check_mode: false
      changed_when: false
      ignore_errors: true

    # - name: Set quarkus syslog in quarkus.properties
    #   ansible.builtin.blockinfile:
    #     path: "{{ keycloak_home }}/conf/quarkus.properties"
    #     block: |
    #       quarkus.log.syslog.enable=true
    #       quarkus.log.syslog.endpoint={{ quarkus_endpoint }}
    #       quarkus.log.syslog.protocol={{ quarkus_protocol }}
    #     state: present
    #     create: true
    #     marker: "# {mark} ANSIBLE MANAGED BLOCK - QUARKUS"
    #   register: result
    #   check_mode: false
    #   changed_when: false
    #   ignore_errors: true

    - name: Set action mail account in auditd.conf
      lineinfile:
        path: /etc/audit/auditd.conf
        regexp: "^action_mail_acct = "
        line: action_mail_acct = {{ action_mail_account }}
        state: present
        create: true
      register: result
      check_mode: false
      changed_when: false
      ignore_errors: true
  when: xccdf_hdf_group_KEYC_01_000017
  tags:
    - cat2
    - medium
    - xccdf_hdf_group_KEYC-01-000017

# TODO: enabledEventTypes part probably isn't correct here
- name: MEDIUM | xccdf_hdf_group_KEYC-01-000018 | Keycloak must be configured to generate audit records overwriting the oldest audit records in a first-in-first-out
    manner.
  block:
    - name: Configure audit record overwriting to FIFO
      ansible.builtin.shell: >
        {{ path }}kcadm.sh update events/config -r {{ keycloak_realm }} -s eventsEnabled=true -s 'eventsListeners=["jboss-logging"]'
        -s 'enabledEventTypes={{ enabled_event_types_string }}'
      register: result
      check_mode: false
      changed_when: false
      ignore_errors: true

    - name: Set spi events in keycloak.conf
      ansible.builtin.blockinfile:
        path: "{{ keycloak_home }}/conf/keycloak.conf"
        block: |
          spi-events-listener-jboss-logging-success-level=info
          spi-events-listener-jboss-logging-error-level=error
        state: present
        create: true
        marker: "# {mark} ANSIBLE MANAGED BLOCK - SPI EVENTS"
      register: result
      check_mode: false
      changed_when: false
      ignore_errors: true

  # - name: Set quarkus syslog in quarkus.properties
  #   ansible.builtin.blockinfile:
  #     path: "{{ keycloak_home }}/conf/quarkus.properties"
  #     block: |
  #       quarkus.log.syslog.enable=true
  #       quarkus.log.syslog.endpoint={{ quarkus_endpoint }}
  #       quarkus.log.syslog.protocol={{ quarkus_protocol }}
  #     state: present
  #     create: true
  #     marker: "# {mark} ANSIBLE MANAGED BLOCK - QUARKUS"
  #   register: result
  #   check_mode: false
  #   changed_when: false
  #   ignore_errors: true
  when: xccdf_hdf_group_KEYC_01_000018
  tags:
    - cat2
    - medium
    - xccdf_hdf_group_KEYC-01-000018
    

# TODO: syslog is configured to alert the SA and ISSO when any audit processing failure occurs?

# TODO: enabledEventTypes part probably isn't correct here
- name: MEDIUM | xccdf_hdf_group_KEYC-01-000019 | Keycloak must be configured to queue audit records locally until communication is restored when any audit
    processing failure occurs.
  block:
    - name: Configure queuing of audit records locally
      ansible.builtin.shell: >
        {{ path }}kcadm.sh update events/config -r {{ keycloak_realm }} -s eventsEnabled=true -s 'eventsListeners=["jboss-logging"]'
        -s 'enabledEventTypes={{ enabled_event_types_string }}'
      register: result
      check_mode: false
      changed_when: false
      ignore_errors: true

    - name: Set spi events in keycloak.conf
      ansible.builtin.blockinfile:
        path: "{{ keycloak_home }}/conf/keycloak.conf"
        block: |
          spi-events-listener-jboss-logging-success-level=info
          spi-events-listener-jboss-logging-error-level=error
        state: present
        create: true
        marker: "# {mark} ANSIBLE MANAGED BLOCK - SPI EVENTS"
      register: result
      check_mode: false
      changed_when: false
      ignore_errors: true

  # - name: Set quarkus syslog in quarkus.properties
  #   ansible.builtin.blockinfile:
  #     path: "{{ keycloak_home }}/conf/keycloak.conf"
  #     block: |
  #       quarkus.log.syslog.enable=true
  #       quarkus.log.syslog.endpoint={{ quarkus_endpoint }}
  #       quarkus.log.syslog.protocol={{ quarkus_protocol }}
  #     state: present
  #     create: true
  #     marker: "# {mark} ANSIBLE MANAGED BLOCK - QUARKUS"
  #   register: result
  #   check_mode: false
  #   changed_when: false
  #   ignore_errors: true
  when: xccdf_hdf_group_KEYC_01_000019
  tags:
    - cat2
    - medium
    - xccdf_hdf_group_KEYC-01-000019
    

# TODO: log service is enabled on the system?

# TODO: Where does profile.properties go?
- name: MEDIUM | xccdf_hdf_group_KEYC-01-000021 | Keycloak must be configured to disable non-essential modules.
  ansible.builtin.blockinfile:
    path: "{{ keycloak_home }}/conf/profile.properties"
    block: |
      {{ profile_properties_features }}
    state: present
    create: true
    marker: "# {mark} ANSIBLE MANAGED BLOCK - PROFILE FEATURES"
  register: result
  check_mode: false
  changed_when: false
  ignore_errors: true
  when: xccdf_hdf_group_KEYC_01_000021
  tags:
    - cat2
    - medium
    - xccdf_hdf_group_KEYC-01-000021

# TODO: applicable in a container?
#- name: "MEDIUM | xccdf_hdf_group_KEYC-01-000024 | Keycloak must be configured to prohibit or restrict the use of organization-defined functions, ports, protocols, and/or services, as defined in the PPSM CAL and vulnerability assessments."
#  ansible.builtin.shell: 
#  register: result
#  check_mode: false
#  changed_when: false
#  ignore_errors: true
#  when: xccdf_hdf_group_KEYC_01_000024
#  tags:
#    - cat2
#    - medium
#    - xccdf_hdf_group_KEYC-01-000024

- name: MEDIUM | xccdf_hdf_group_KEYC-01-000026 | Keycloak must be configured to require multifactor authentication using Personal Identity Verification (PIV)
    credentials for authenticating privileged user accounts.
  block:
    - name: get current flows
      ansible.builtin.shell: >
        {{ path }}kcadm.sh get authentication/flows
      register: initial_flows
      ignore_errors: false

    - name: set initial flows' authenticators in json
      ansible.builtin.set_fact:
        initial_json_authenticators: "{{ initial_flows.stdout | from_json | community.general.json_query('[*].authenticationExecutions[*].authenticator') | list }}"

    - name: set initial flows' authenticator to array
      ansible.builtin.set_fact:
        initial_authenticators: "{{ query('community.general.flattened', initial_json_authenticators) }}"

    # The following is executed on the condition that auth-otp-form was not found
    - block:
        - name: set initial flows' ids in json
          ansible.builtin.set_fact:
            initial_json_ids: "{{ initial_flows.stdout | from_json | community.general.json_query('[*].id') | list }}"

        - name: set initial flows' ids to array
          ansible.builtin.set_fact:
            initial_ids: "{{ query('community.general.flattened', initial_json_ids) }}"

        - debug:
            msg: "{{ initial_ids }}"

        - name: create a copy of browser authentication flow
          ansible.builtin.shell: |
            {{ path }}kcadm.sh create authentication/flows/browser/copy -s \"providerId\"=\"basic_flow\"
            {{ path }}kcadm.sh get authentication/flows
          register: new_flows
          check_mode: false
          changed_when: false
          ignore_errors: false

        - name: set new flows in json
          ansible.builtin.set_fact:
            new_ids: "{{ new_flows.stdout | from_json | community.general.json_query('[*].id') | list }}"

        - name: set variable for new flow id
          ansible.builtin.set_fact:
            new_id: "{{ new_ids | difference(initial_ids) | list }}"

        - name: update new flow's alias
          ansible.builtin.shell: |
            {{ path }}kcadm.sh update authentication/flows/{{ new_id.0 }} -s \"alias\"=\"otp_alias\"
          ignore_errors: false

        - name: update new flow's execution
          ansible.builtin.shell: |
            {{ path }}kcadm.sh create authentication/flows/otp_alias/executions/execution -s \"provider\"=\"auth-otp-form\"
          register: success
          ignore_errors: false

        - name: get new flows execution
          ansible.builtin.shell: |
            {{ path }}kcadm.sh get authentication/flows/otp_alias/executions
          register: custom_flow
          ignore_errors: false

        - name: set new flow in json
          ansible.builtin.set_fact:
            custom_json_flow: "{{ custom_flow.stdout | from_json | community.general.json_query('[*]') }}"

        - name: get x509 execution id
          ansible.builtin.set_fact:
            x509_id: "{{ custom_json_flow | community.general.json_query('[?providerId==`auth-otp-form`].id') }}"

        - name: create config
          ansible.builtin.shell: |
            {{ path }}kcadm.sh create "authentication/executions/{{ x509_id.0 }}/config" -r master -b '{"config":{"x509-cert-auth.timestamp-validation-enabled":"true"},"alias":"new_flow"}'
          register: custom_flow
          ignore_errors: false
      when: '"auth-otp-form" not in initial_authenticators'
  when: xccdf_hdf_group_KEYC_01_000026
  # end conditional

  #    - name: get current executions
  #      ansible.builtin.shell: >
  #        {{ path }}kcadm.sh get authentication/flows/browser/executions
  #      register: executions
  #      ignore_errors: false
  #
  #    - name: set initial flows' executions in json
  #      ansible.builtin.set_fact:
  #        json_executions: "{{ executions.stdout | from_json | community.general.json_query('[*]') }}"
  #
  #    - name: get auth-otp-form level
  #      ansible.builtin.set_fact:
  #        auth_otp_level: "{{ json_executions | community.general.json_query('[?providerId==`auth-otp-form`].level') }}"
  #
  #    - name: auth-otp-leve
  #      debug: msg={{ auth_otp_level }}
  tags:
    - cat2
    - medium
    - xccdf_hdf_group_KEYC-01-000026

- name: MEDIUM | xccdf_hdf_group_KEYC-01-000027 | Keycloak must be configured to require multifactor authentication using Common Access Card (CAC) Personal
    Identity Verification (PIV) credentials for authenticating non-privileged user accounts.
  block:
    - name: get current flows
      ansible.builtin.shell: >
        {{ path }}kcadm.sh get authentication/flows
      register: initial_flows
      ignore_errors: false

    - name: set initial flows' authenticators in json
      ansible.builtin.set_fact:
        initial_json_authenticators: "{{ initial_flows.stdout | from_json | community.general.json_query('[*].authenticationExecutions[*].authenticator') | list }}"

    - name: set initial flows' authenticator to array
      ansible.builtin.set_fact:
        initial_authenticators: "{{ query('community.general.flattened', initial_json_authenticators) }}"

    # The following is executed on the condition that ... was not found
    - block:
        - name: set initial flows' ids in json
          ansible.builtin.set_fact:
            initial_json_ids: "{{ initial_flows.stdout | from_json | community.general.json_query('[*].id') | list }}"

        - name: set initial flows' ids to array
          ansible.builtin.set_fact:
            initial_ids: "{{ query('community.general.flattened', initial_json_ids) }}"

        - name: create a copy of browser authentication flow
          ansible.builtin.shell: |
            {{ path }}kcadm.sh create authentication/flows/browser/copy -s \"providerId\"=\"basic_flow\"
            {{ path }}kcadm.sh get authentication/flows
          register: new_flows
          check_mode: false
          changed_when: false
          ignore_errors: false

        - name: set new flows in json
          ansible.builtin.set_fact:
            new_ids: "{{ new_flows.stdout | from_json | community.general.json_query('[*].id') | list }}"

        - name: set variable for new flow id
          ansible.builtin.set_fact:
            new_id: "{{ new_ids | difference(initial_ids) | list }}"

        - name: update new flow's alias
          ansible.builtin.shell: |
            {{ path }}kcadm.sh update authentication/flows/{{ new_id.0 }} -s \"alias\"=\"browser\"
          ignore_errors: false

        - name: update new flow's execution
          ansible.builtin.shell: |
            {{ path }}kcadm.sh create authentication/flows/browser/executions/execution -s \"provider\"=\"auth-x509-client-username-form\"
          register: success
          ignore_errors: false

        - name: get new flows execution
          ansible.builtin.shell: |
            {{ path }}kcadm.sh get authentication/flows/browser/executions
          register: custom_flow
          ignore_errors: false

        - name: set new flow in json
          ansible.builtin.set_fact:
            custom_json_flow: "{{ custom_flow.stdout | from_json | community.general.json_query('[*]') }}"

        - name: get x509 execution id
          ansible.builtin.set_fact:
            x509_id: "{{ custom_json_flow | community.general.json_query('[?providerId==`auth-x509-client-username-form`].id') }}"

        - name: create config
          ansible.builtin.shell: |
            {{ path }}kcadm.sh create "authentication/executions/{{ x509_id.0 }}/config" -r master -b '{"config":{"x509-cert-auth.timestamp-validation-enabled":"true"},"alias":"new_flow"}'
          register: custom_flow
          ignore_errors: false
      when: '"auth-x509-client-username-form" not in initial_authenticators'
  when: xccdf_hdf_group_KEYC_01_000027
  tags:
    - cat2
    - medium
    - xccdf_hdf_group_KEYC-01-000027
#
#- name: "MEDIUM | xccdf_hdf_group_KEYC-01-000029 | Keycloak must be configured to enforce a minimum 15-character password length."
#  ansible.builtin.shell: 
#  register: result
#  check_mode: false
#  changed_when: false
#  ignore_errors: true
#  when: xccdf_hdf_group_KEYC_01_000029
#  tags:
#    - cat2
#    - medium
#    - xccdf_hdf_group_KEYC-01-000029
#
#- name: "MEDIUM | xccdf_hdf_group_KEYC-01-000030 | Keycloak must be configured to prohibit password reuse for a minimum of five generations."
#  ansible.builtin.shell: 
#  register: result
#  check_mode: false
#  changed_when: false
#  ignore_errors: true
#  when: xccdf_hdf_group_KEYC_01_000030
#  tags:
#    - cat2
#    - medium
#    - xccdf_hdf_group_KEYC-01-000030
#    
#- name: "MEDIUM | xccdf_hdf_group_KEYC-01-000031 | Keycloak must be configured to enforce password complexity by requiring that at least one upper-case character be used."
#  ansible.builtin.shell: 
#  register: result
#  check_mode: false
#  changed_when: false
#  ignore_errors: true
#  when: xccdf_hdf_group_KEYC_01_000031
#  tags:
#    - cat2
#    - medium
#    - xccdf_hdf_group_KEYC-01-000031

#- name: "MEDIUM | xccdf_hdf_group_KEYC-01-000032 | Keycloak must be configured to enforce password complexity by requiring that at least one lower-case character be used."
#  ansible.builtin.shell: 
#  register: result
#  check_mode: false
#  changed_when: false
#  ignore_errors: true
#  when: xccdf_hdf_group_KEYC_01_000032
#  tags:
#    - cat2
#    - medium
#    - xccdf_hdf_group_KEYC-01-000032
#    
#- name: "MEDIUM | xccdf_hdf_group_KEYC-01-000033 | Keycloak must be configured to enforce password complexity by requiring that at least one numeric character be used."
#  ansible.builtin.shell: 
#  register: result
#  check_mode: false
#  changed_when: false
#  ignore_errors: true
#  when: xccdf_hdf_group_KEYC_01_000033
#  tags:
#    - cat2
#    - medium
#    - xccdf_hdf_group_KEYC-01-000033
#    
#- name: "MEDIUM | xccdf_hdf_group_KEYC-01-000034 | Keycloak must be configured to enforce password complexity by requiring that at least one special character be used."
#  ansible.builtin.shell: 
#  register: result
#  check_mode: false
#  changed_when: false
#  ignore_errors: true
#  when: xccdf_hdf_group_KEYC_01_000034
#  tags:
#    - cat2
#    - medium
#    - xccdf_hdf_group_KEYC-01-000034
#    
#
#- name: "MEDIUM | xccdf_hdf_group_KEYC-01-000038 | Keycloak must be configured to enforce 24 hours as the minimum password lifetime."
#  ansible.builtin.shell: 
#  register: result
#  check_mode: false
#  changed_when: false
#  ignore_errors: true
#  when: xccdf_hdf_group_KEYC_01_000038
#  tags:
#    - cat2
#    - medium
#    - xccdf_hdf_group_KEYC-01-000038
#    
#- name: "MEDIUM | xccdf_hdf_group_KEYC-01-000039 | Keycloak must be configured to enforce a 60-day maximum password lifetime restriction."
#  ansible.builtin.shell: 
#  register: result
#  check_mode: false
#  changed_when: false
#  ignore_errors: true
#  when: xccdf_hdf_group_KEYC_01_000039
#  tags:
#    - cat2
#    - medium
#    - xccdf_hdf_group_KEYC-01-000039
#    
- name: MEDIUM | xccdf_hdf_group_KEYC-01-000043 | Keycloak must be configured to map the authenticated identity to the user account for PKI-based authentication.
  block:
    - name: get current flows
      ansible.builtin.shell: >
        {{ path }}kcadm.sh get authentication/flows
      register: initial_flows
      ignore_errors: false

    - name: set initial flows' authenticators in json
      ansible.builtin.set_fact:
        initial_json_authenticators: "{{ initial_flows.stdout | from_json | community.general.json_query('[*].authenticationExecutions[*].authenticator') | list }}"

    - name: set initial flows' authenticator to array
      ansible.builtin.set_fact:
        initial_authenticators: "{{ query('community.general.flattened', initial_json_authenticators) }}"

    # The following is executed on the condition that ... was not found
    - block:
        - name: set initial flows' ids in json
          ansible.builtin.set_fact:
            initial_json_ids: "{{ initial_flows.stdout | from_json | community.general.json_query('[*].id') | list }}"

        - name: set initial flows' ids to array
          ansible.builtin.set_fact:
            initial_ids: "{{ query('community.general.flattened', initial_json_ids) }}"

        - name: create a copy of browser authentication flow
          ansible.builtin.shell: |
            {{ path }}kcadm.sh create authentication/flows/browser/copy -s \"providerId\"=\"basic_flow\"
            {{ path }}kcadm.sh get authentication/flows
          register: new_flows
          check_mode: false
          changed_when: false
          ignore_errors: false

        - name: set new flows in json
          ansible.builtin.set_fact:
            new_ids: "{{ new_flows.stdout | from_json | community.general.json_query('[*].id') | list }}"

        - name: set variable for new flow id
          ansible.builtin.set_fact:
            new_id: "{{ new_ids | difference(initial_ids) | list }}"

        - name: update new flow's alias
          ansible.builtin.shell: |
            {{ path }}kcadm.sh update authentication/flows/{{ new_id.0 }} -s \"alias\"=\"x509_alias\"
          ignore_errors: false

        - name: update new flow's execution
          ansible.builtin.shell: |
            {{ path }}kcadm.sh create authentication/flows/x509_alias/executions/execution -s \"provider\"=\"auth-x509-client-username-form\"
          register: success
          ignore_errors: false

        - name: get new flows execution
          ansible.builtin.shell: |
            {{ path }}kcadm.sh get authentication/flows/x509_alias/executions
          register: custom_flow
          ignore_errors: false

        - name: set new flow in json
          ansible.builtin.set_fact:
            custom_json_flow: "{{ custom_flow.stdout | from_json | community.general.json_query('[*]') }}"

        - name: get x509 execution id
          ansible.builtin.set_fact:
            x509_id: "{{ custom_json_flow | community.general.json_query('[?providerId==`auth-x509-client-username-form`].id') }}"

        - name: create config
          ansible.builtin.shell: |
            {{ path }}kcadm.sh create "authentication/executions/{{ x509_id.0 }}/config" -r master -b '{"config":{"x509-cert-auth.mapper-selection":"example@mail.com"},"alias":"new_flow"}'
          register: custom_flow
          ignore_errors: false
      when: '"auth-x509-client-username-form" not in initial_authenticators'
  when: xccdf_hdf_group_KEYC_01_000043
  tags:
    - cat2
    - medium
    - xccdf_hdf_group_KEYC-01-000043

- name: MEDIUM | xccdf_hdf_group_KEYC-01-000047 | Keycloak must be configured to notify the system administrators and ISSO when accounts are created.
  block:
    - name: Configure notifications when accounts are created
      ansible.builtin.shell: >
        {{ path }}kcadm.sh update events/config -r {{ keycloak_realm }} -s eventsEnabled=true -s 'eventsListeners=["jboss-logging"]'
      register: result
      check_mode: false
      changed_when: false
      ignore_errors: true

  when: xccdf_hdf_group_KEYC_01_000047
  tags:
    - cat2
    - medium
    - xccdf_hdf_group_KEYC-01-000047
    

- name: MEDIUM | xccdf_hdf_group_KEYC-01-000048 | Keycloak must be configured to notify the system administrators and ISSO when accounts are modified.
  block:
    - name: Configure notifications when accounts are modified
      ansible.builtin.shell: >
        {{ path }}kcadm.sh update events/config -r {{ keycloak_realm }} -s eventsEnabled=true -s 'eventsListeners=["jboss-logging"]'
      register: result
      check_mode: false
      changed_when: false
      ignore_errors: true

  when: xccdf_hdf_group_KEYC_01_000048
  tags:
    - cat2
    - medium
    - xccdf_hdf_group_KEYC-01-000048

- name: MEDIUM | xccdf_hdf_group_KEYC-01-000049 | Keycloak must be configured to notify the system administrators and ISSO for account disabling actions.
  block:
    - name: Configure notifications when accounts are disabled
      ansible.builtin.shell: >
        {{ path }}kcadm.sh update events/config -r {{ keycloak_realm }} -s eventsEnabled=true -s 'eventsListeners=["jboss-logging"]'
      register: result
      check_mode: false
      changed_when: false
      ignore_errors: true

  when: xccdf_hdf_group_KEYC_01_000049
  tags:
    - cat2
    - medium
    - xccdf_hdf_group_KEYC-01-000049

- name: MEDIUM | xccdf_hdf_group_KEYC-01-000050 | Keycloak must be configured to notify the system administrators and ISSO for account removal actions.
  block:
    - name: Configure notifications when accounts are removed
      ansible.builtin.shell: >
        {{ path }}kcadm.sh update events/config -r {{ keycloak_realm }} -s eventsEnabled=true -s 'eventsListeners=["jboss-logging"]'
      register: result
      check_mode: false
      changed_when: false
      ignore_errors: true

  when: xccdf_hdf_group_KEYC_01_000050
  tags:
    - cat2
    - medium
    - xccdf_hdf_group_KEYC-01-000050

- name: MEDIUM | xccdf_hdf_group_KEYC-01-000051 | Keycloak must be configured to automatically audit account enabling actions.
  ansible.builtin.shell: >
    {{ path }}kcadm.sh update events/config -r {{ keycloak_realm }} -s adminEventsEnabled=true
    -s adminEventsDetailsEnabled=true
  register: result
  check_mode: false
  changed_when: false
  ignore_errors: true
  when: xccdf_hdf_group_KEYC_01_000051
  tags:
    - cat2
    - medium
    - xccdf_hdf_group_KEYC-01-000051

- name: MEDIUM | xccdf_hdf_group_KEYC-01-000052 | Keycloak must be configured to notify system administrators and ISSO of account enabling actions.
  block:
    - name: Configure notifications when accounts are enabled
      ansible.builtin.shell: >
        {{ path }}kcadm.sh update events/config -r {{ keycloak_realm }} -s eventsEnabled=true -s 'eventsListeners={{ events_listeners_string }}'
      register: result
      check_mode: false
      changed_when: false
      ignore_errors: true

  when: xccdf_hdf_group_KEYC_01_000052
  tags:
    - cat2
    - medium
    - xccdf_hdf_group_KEYC-01-000052

- name: MEDIUM | xccdf_hdf_group_KEYC-01-000054 | Keycloak must be configured to maintain locks on user accounts until released by an administrator.
  ansible.builtin.shell: |
    {{ path }}kcadm.sh update realms/{{ keycloak_realm }} -s 'bruteForceProtected=true'
    {{ path }}kcadm.sh update realms/{{ keycloak_realm }} -s 'permanentLockout=true'
  register: result
  check_mode: false
  changed_when: false
  ignore_errors: true
  when: xccdf_hdf_group_KEYC_01_000054
  tags:
    - cat2
    - medium
    - xccdf_hdf_group_KEYC-01-000054

- name: MEDIUM | xccdf_hdf_group_KEYC-01-000055 | Keycloak must be configured to send audit records to a centralized audit server.
  block:
    - name: Configure transport of audit records
      ansible.builtin.shell: >
        {{ path }}kcadm.sh update events/config -r {{ keycloak_realm }} -s eventsEnabled=true -s 'eventsListeners=["jboss-logging"]'
        -s 'enabledEventTypes={{ enabled_event_types_string }}'
      register: result
      check_mode: false
      changed_when: false
      ignore_errors: true

    - name: Set spi events in keycloak.conf
      ansible.builtin.blockinfile:
        path: "{{ keycloak_home }}/conf/keycloak.conf"
        block: |
          spi-events-listener-jboss-logging-success-level=info
          spi-events-listener-jboss-logging-error-level=error
        state: present
        create: true
        marker: "# {mark} ANSIBLE MANAGED BLOCK - SPI EVENTS"
      register: result
      check_mode: false
      changed_when: false
      ignore_errors: true

  # - name: Set quarkus syslog in quarkus.properties
  #   ansible.builtin.blockinfile:
  #     path: "{{ keycloak_home }}/conf/quarkus.properties"
  #     block: |
  #       quarkus.log.syslog.enable=true
  #       quarkus.log.syslog.endpoint={{ quarkus_endpoint }}
  #       quarkus.log.syslog.protocol={{ quarkus_protocol }}
  #     state: present
  #     create: true
  #     marker: "# {mark} ANSIBLE MANAGED BLOCK - QUARKUS"
  #   register: result
  #   check_mode: false
  #   changed_when: false
  #   ignore_errors: true
  when: xccdf_hdf_group_KEYC_01_000055
  tags:
    - cat2
    - medium
    - xccdf_hdf_group_KEYC-01-000055

- name: MEDIUM | xccdf_hdf_group_KEYC-01-000056 | Keycloak must be configured to use or map to Coordinated Universal Time (UTC) to record time stamps for
    audit records.
  block:
    - name: Configure to record time stamps in UTC
      ansible.builtin.shell: >
        {{ path }}kcadm.sh update events/config -r {{ keycloak_realm }} -s adminEventsEnabled=true  -s adminEventsDetailsEnabled=true -s eventsEnabled=true -s 'eventsListeners=["jboss-logging"]'
        -s 'enabledEventTypes={{ enabled_event_types_string }}'
      register: result
      check_mode: false
      changed_when: false
      ignore_errors: true

    - name: Set spi events in keycloak.conf
      ansible.builtin.blockinfile:
        path: "{{ keycloak_home }}/conf/keycloak.conf"
        block: |
          spi-events-listener-jboss-logging-success-level=info
          spi-events-listener-jboss-logging-error-level=error
        state: present
        create: true
        marker: "# {mark} ANSIBLE MANAGED BLOCK - SPI EVENTS"
      register: result
      check_mode: false
      changed_when: false
      ignore_errors: true

  # - name: Set quarkus syslog in quarkus.properties
  #   ansible.builtin.blockinfile:
  #     path: "{{ keycloak_home }}/conf/quarkus.properties"
  #     block: |
  #       quarkus.log.syslog.enable=true
  #       quarkus.log.syslog.endpoint={{ quarkus_endpoint }}
  #       quarkus.log.syslog.protocol={{ quarkus_protocol }}
  #       quarkus.log.syslog.format={{ quarkus_format }}
  #     state: present
  #     create: true
  #     marker: "# {mark} ANSIBLE MANAGED BLOCK - QUARKUS"
  #   register: result
  #   check_mode: false
  #   changed_when: false
  #   ignore_errors: true
  when: xccdf_hdf_group_KEYC_01_000056
  tags:
    - cat2
    - medium
    - xccdf_hdf_group_KEYC-01-000056

- name: MEDIUM | xccdf_hdf_group_KEYC-01-000057 | Keycloak must be configured with a minimum granularity of one second to record time stamps for audit records.
  block:
    - name: Configure time stamp granularity
      ansible.builtin.shell: >
        {{ path }}kcadm.sh update events/config -r {{ keycloak_realm }} -s adminEventsEnabled=true  -s adminEventsDetailsEnabled=true -s eventsEnabled=true -s 'eventsListeners=["jboss-logging"]'
        -s 'enabledEventTypes={{ enabled_event_types_string }}'
      register: result
      check_mode: false
      changed_when: false
      ignore_errors: true

    - name: Set spi events in keycloak.conf
      ansible.builtin.blockinfile:
        path: "{{ keycloak_home }}/conf/keycloak.conf"
        block: |
          spi-events-listener-jboss-logging-success-level=info
          spi-events-listener-jboss-logging-error-level=error
        state: present
        create: true
        marker: "# {mark} ANSIBLE MANAGED BLOCK - SPI EVENTS"
      register: result
      check_mode: false
      changed_when: false
      ignore_errors: true

    - name: Set log console format in keycloak.conf
      lineinfile:
        path: "{{ keycloak_home }}/conf/keycloak.conf"
        regexp: ^log-console-format
        line: log-console-format={{ log_console_format }}
        state: present
        create: true
      register: result
      check_mode: false
      changed_when: false
      ignore_errors: true
  when: xccdf_hdf_group_KEYC_01_000057
  tags:
    - cat2
    - medium
    - xccdf_hdf_group_KEYC-01-000057
    
#
#- name: "MEDIUM | xccdf_hdf_group_KEYC-01-000059 | Keycloak must be configured to allow the use of a temporary password at initial logon with an immediate change to a permanent password."
#  ansible.builtin.shell: 
#  register: result
#  check_mode: false
#  changed_when: false
#  ignore_errors: true
#  when: xccdf_hdf_group_KEYC_01_000059
#  tags:
#    - cat2
#    - medium
#    - xccdf_hdf_group_KEYC-01-000059
#    
#
#- name: "MEDIUM | xccdf_hdf_group_KEYC-01-000064 | AAA Services must not be configured with shared accounts."
#  ansible.builtin.shell:
#  register: result
#  check_mode: false
#  changed_when: false
#  ignore_errors: true
#  when: xccdf_hdf_group_KEYC_01_000064
#  tags:
#    - cat2
#    - medium
#    - xccdf_hdf_group_KEYC-01-000064