---
- name: MEDIUM | xccdf_hdf_group_KEYC-01-000005 | Keycloak must be configured to automatically audit account creation.
  block:
    - name: Configure to audit account creation
      community.general.keycloak_realm:
        auth_keycloak_url: "{{ keycloak_server_address }}"
        auth_client_id: "{{ keycloak_client_id }}"
        realm: "{{ keycloak_realm }}"
        auth_realm: "{{ keycloak_realm }}"
        auth_username: "{{ keycloak_admin_user }}"
        auth_password: "{{ keycloak_admin_password }}"
        state: present
        admin_events_enabled: yes
        admin_events_details_enabled: yes
        events_enabled: yes

    - name: Update enabled_event_types_list and events_listeners_list
      ansible.builtin.set_fact:
        enabled_event_types_list: "{{ enabled_event_types_list | union(['REGISTER']) | unique }}"
        events_listeners_list: "{{ events_listeners_list | union(['jboss-logging']) | unique }}"
  tags:
    - cat2
    - medium
    - xccdf_hdf_group_KEYC-01-000005

- name: MEDIUM | xccdf_hdf_group_KEYC-01-000006 | Keycloak must be configured to automatically audit account modification.
  block:
    - name: Configure to audit account modification
      community.general.keycloak_realm:
        auth_keycloak_url: "{{ keycloak_server_address }}"
        auth_client_id: "{{ keycloak_client_id }}"
        realm: "{{ keycloak_realm }}"
        auth_realm: "{{ keycloak_realm }}"
        auth_username: "{{ keycloak_admin_user }}"
        auth_password: "{{ keycloak_admin_password }}"
        admin_events_enabled: yes
        admin_events_details_enabled: yes
        events_enabled: true
        state: present
        

    - name: Update enabled_event_types_list and events_listeners_list
      ansible.builtin.set_fact:
        enabled_event_types_list: "{{ enabled_event_types_list | union(['UPDATE_PROFILE', 'UPDATE_EMAIL', 'UPDATE_PASSWORD']) | unique }}"
        events_listeners_list: "{{ events_listeners_list | union(['jboss-logging']) | unique }}"
  tags:
    - cat2
    - medium
    - xccdf_hdf_group_KEYC-01-000006

- name: MEDIUM | xccdf_hdf_group_KEYC-01-000007 | Keycloak must be configured to automatically audit account disabling actions.
  block:
    - name: Configure to audit account disabling
      community.general.keycloak_realm:
        auth_keycloak_url: "{{ keycloak_server_address }}"
        auth_client_id: "{{ keycloak_client_id }}"
        realm: "{{ keycloak_realm }}"
        auth_realm: "{{ keycloak_realm }}"
        auth_username: "{{ keycloak_admin_user }}"
        auth_password: "{{ keycloak_admin_password }}"
        state: present
        admin_events_enabled: yes
        admin_events_details_enabled: yes

    - name: Update events_listeners_list
      ansible.builtin.set_fact:
        events_listeners_list: "{{ events_listeners_list | union(['jboss-logging']) | unique }}"
  tags:
    - cat2
    - medium
    - xccdf_hdf_group_KEYC-01-000007

- name: MEDIUM | xccdf_hdf_group_KEYC-01-000008 | Keycloak must be configured to automatically audit account removal actions.
  block:
    - name: Configure to audit account removal
      community.general.keycloak_realm:
        auth_keycloak_url: "{{ keycloak_server_address }}"
        auth_client_id: "{{ keycloak_client_id }}"
        realm: "{{ keycloak_realm }}"
        auth_realm: "{{ keycloak_realm }}"
        auth_username: "{{ keycloak_admin_user }}"
        auth_password: "{{ keycloak_admin_password }}"
        state: present
        admin_events_enabled: yes
        admin_events_details_enabled: yes
        events_enabled: yes

    - name: Update enabled_event_types_list and events_listeners_list
      ansible.builtin.set_fact:
        enabled_event_types_list: "{{ enabled_event_types_list | union(['DELETE_ACCOUNT']) | unique }}"
        events_listeners_list: "{{ events_listeners_list | union(['jboss-logging']) | unique }}"
  tags:
    - cat2
    - medium
    - xccdf_hdf_group_KEYC-01-000008

- name: MEDIUM | xccdf_hdf_group_KEYC-01-000009 | Keycloak must be configured to automatically lock user accounts after three consecutive invalid logon attempts
    within a 15-minute time period.
  ansible.builtin.shell: |
    {{ path }}kcadm.sh update realms/{{ keycloak_realm }} -s 'bruteForceProtected=true'
    {{ path }}kcadm.sh update realms/{{ keycloak_realm }} -s 'failureFactor={{ failure_factor }}'
    {{ path }}kcadm.sh update realms/{{ keycloak_realm }} -s 'maxDeltaTimeSeconds={{ max_delta_time_seconds }}'
  register: result
  check_mode: false
  changed_when: false
#  ignore_errors: true
  tags:
    - cat2
    - medium
    - xccdf_hdf_group_KEYC-01-000009

- name: MEDIUM | xccdf_hdf_group_KEYC-01-000010 | Keycloak must be configured to audit each authentication and authorization transaction.
  block:
    - name: Configure to audit authentication and authorization transaction
      community.general.keycloak_realm:
        auth_keycloak_url: "{{ keycloak_server_address }}"
        auth_client_id: "{{ keycloak_client_id }}"
        realm: "{{ keycloak_realm }}"
        auth_realm: "{{ keycloak_realm }}"
        auth_username: "{{ keycloak_admin_user }}"
        auth_password: "{{ keycloak_admin_password }}"
        state: present
        admin_events_enabled: yes
        admin_events_details_enabled: yes
        events_enabled: yes

    - name: Update enabled_event_types_list and events_listeners_list
      ansible.builtin.set_fact:
#        enabled_event_types_list: "{{ enabled_event_types_list | union(['']) | unique }}"
        events_listeners_list: "{{ events_listeners_list | union(['jboss-logging']) | unique }}"
  tags:
    - cat2
    - medium
    - xccdf_hdf_group_KEYC-01-000010

- name: MEDIUM | xccdf_hdf_group_KEYC-01-000011 | Keycloak configuration audit records must identify what type of events occurred.
  block:
    - name: Configure to audit authentication and authorization transaction
      community.general.keycloak_realm:
        auth_keycloak_url: "{{ keycloak_server_address }}"
        auth_client_id: "{{ keycloak_client_id }}"
        realm: "{{ keycloak_realm }}"
        auth_realm: "{{ keycloak_realm }}"
        auth_username: "{{ keycloak_admin_user }}"
        auth_password: "{{ keycloak_admin_password }}"
        state: present
        admin_events_enabled: yes
        admin_events_details_enabled: yes
        events_enabled: yes

    - name: Update events_listeners_list
      ansible.builtin.set_fact:
        events_listeners_list: "{{ events_listeners_list | union(['jboss-logging']) | unique }}"
  tags:
    - cat2
    - medium
    - xccdf_hdf_group_KEYC-01-000011

- name: MEDIUM | xccdf_hdf_group_KEYC-01-000012 | Keycloak configuration audit records must identify when (date and time) the events occurred.
  block:
    - name: Configure to audit date and time of event occurrence
      community.general.keycloak_realm:
        auth_keycloak_url: "{{ keycloak_server_address }}"
        auth_client_id: "{{ keycloak_client_id }}"
        realm: "{{ keycloak_realm }}"
        auth_realm: "{{ keycloak_realm }}"
        auth_username: "{{ keycloak_admin_user }}"
        auth_password: "{{ keycloak_admin_password }}"
        state: present
        admin_events_enabled: yes
        admin_events_details_enabled: yes
        events_enabled: yes

    - name: Update events_listeners_list
      ansible.builtin.set_fact:
        events_listeners_list: "{{ events_listeners_list | union(['jboss-logging']) | unique }}"

    - name: Set log console format in keycloak.conf
      lineinfile:
        path: "{{ keycloak_home }}/conf/keycloak.conf"
        regexp: ^log-console-format
        line: log-console-format={{ log_console_format }}
        state: present
        create: true
      register: result
      check_mode: false
      changed_when: false
#      ignore_errors: true
  tags:
    - cat2
    - medium
    - xccdf_hdf_group_KEYC-01-000012

- name: MEDIUM | xccdf_hdf_group_KEYC-01-000013 | Keycloak configuration audit records must identify where the events occurred.
  block:
    - name: Configure audit records to identify where the events occurred
      community.general.keycloak_realm:
        auth_keycloak_url: "{{ keycloak_server_address }}"
        auth_client_id: "{{ keycloak_client_id }}"
        realm: "{{ keycloak_realm }}"
        auth_realm: "{{ keycloak_realm }}"
        auth_username: "{{ keycloak_admin_user }}"
        auth_password: "{{ keycloak_admin_password }}"
        state: present
        admin_events_enabled: yes
        admin_events_details_enabled: yes
        events_enabled: yes

    - name: Update events_listeners_list
      ansible.builtin.set_fact:
        events_listeners_list: "{{ events_listeners_list | union(['jboss-logging']) | unique }}"
  tags:
    - cat2
    - medium
    - xccdf_hdf_group_KEYC-01-000013

- name: MEDIUM | xccdf_hdf_group_KEYC-01-000014 | Keycloak configuration audit records must identify the source of the events.
  block:
    - name: Configure audit records to identify the source of the events
      community.general.keycloak_realm:
        auth_keycloak_url: "{{ keycloak_server_address }}"
        auth_client_id: "{{ keycloak_client_id }}"
        realm: "{{ keycloak_realm }}"
        auth_realm: "{{ keycloak_realm }}"
        auth_username: "{{ keycloak_admin_user }}"
        auth_password: "{{ keycloak_admin_password }}"
        state: present
        admin_events_enabled: yes
        admin_events_details_enabled: yes
        events_enabled: yes

    - name: Update events_listeners_list
      ansible.builtin.set_fact:
        events_listeners_list: "{{ events_listeners_list | union(['jboss-logging']) | unique }}"
  tags:
    - cat2
    - medium
    - xccdf_hdf_group_KEYC-01-000014

- name: MEDIUM | xccdf_hdf_group_KEYC-01-000015 | Keycloak configuration audit records must identify the outcome of the events.
  block:
    - name: Configure audit records to identify the outcome of the events
      community.general.keycloak_realm:
        auth_keycloak_url: "{{ keycloak_server_address }}"
        auth_client_id: "{{ keycloak_client_id }}"
        realm: "{{ keycloak_realm }}"
        auth_realm: "{{ keycloak_realm }}"
        auth_username: "{{ keycloak_admin_user }}"
        auth_password: "{{ keycloak_admin_password }}"
        state: present
        admin_events_enabled: yes
        admin_events_details_enabled: yes
        events_enabled: yes

    - name: Update events_listeners_list
      ansible.builtin.set_fact:
        events_listeners_list: "{{ events_listeners_list | union(['jboss-logging']) | unique }}"
  tags:
    - cat2
    - medium
    - xccdf_hdf_group_KEYC-01-000015

- name: MEDIUM | xccdf_hdf_group_KEYC-01-000016 | Keycloak configuration audit records must identify any individual user or process associated with the event.
  block:
    - name: Configure audit records to identify any individual user or process associated with the event
      community.general.keycloak_realm:
        auth_keycloak_url: "{{ keycloak_server_address }}"
        auth_client_id: "{{ keycloak_client_id }}"
        realm: "{{ keycloak_realm }}"
        auth_realm: "{{ keycloak_realm }}"
        auth_username: "{{ keycloak_admin_user }}"
        auth_password: "{{ keycloak_admin_password }}"
        state: present
        events_enabled: yes

    - name: Update events_listeners_list
      ansible.builtin.set_fact:
        events_listeners_list: "{{ events_listeners_list | union(['jboss-logging']) | unique }}"
  tags:
    - cat2
    - medium
    - xccdf_hdf_group_KEYC-01-000016

- name: MEDIUM | xccdf_hdf_group_KEYC-01-000017 | Keycloak must be configured to alert the SA and ISSO when any audit processing failure occurs.
  block:
    - name: Configure alerts to SA and ISSO upon audit processing failure
      community.general.keycloak_realm:
        auth_keycloak_url: "{{ keycloak_server_address }}"
        auth_client_id: "{{ keycloak_client_id }}"
        realm: "{{ keycloak_realm }}"
        auth_realm: "{{ keycloak_realm }}"
        auth_username: "{{ keycloak_admin_user }}"
        auth_password: "{{ keycloak_admin_password }}"
        state: present
        events_enabled: yes

    - name: Update events_listeners_list
      ansible.builtin.set_fact:
        events_listeners_list: "{{ events_listeners_list | union(['jboss-logging']) | unique }}"

    - name: Set spi events in keycloak.conf
      ansible.builtin.blockinfile:
        path: "{{ keycloak_home }}/conf/keycloak.conf"
        block: |
          spi-events-listener-jboss-logging-success-level=info
          spi-events-listener-jboss-logging-error-level=error
        state: present
        create: true
        marker: "# {mark} ANSIBLE MANAGED BLOCK - SPI EVENTS"
      register: result
      check_mode: false
      changed_when: false
#      ignore_errors: true

#    - name: Set quarkus syslog in quarkus.properties
#      ansible.builtin.blockinfile:
#        path: "{{ keycloak_home }}/conf/quarkus.properties"
#        block: |
#          quarkus.log.syslog.enable=true
#          quarkus.log.syslog.endpoint={{ quarkus_endpoint }}
#          quarkus.log.syslog.protocol={{ quarkus_protocol }}
#        state: present
#        create: true
#        marker: "# {mark} ANSIBLE MANAGED BLOCK - QUARKUS"
#      register: result
#      check_mode: false
#      changed_when: false
#      ignore_errors: true

    - name: Set action mail account in auditd.conf
      ansible.builtin.lineinfile:
        path: /etc/audit/auditd.conf
        regexp: "^action_mail_acct = "
        line: action_mail_acct = {{ action_mail_account }}
        state: present
        create: true
      register: result
      check_mode: false
      changed_when: false
#      ignore_errors: true

# TODO: Restart the \"auditd\" service so the changes take effect
  tags:
    - cat2
    - medium
    - xccdf_hdf_group_KEYC-01-000017

- name: MEDIUM | xccdf_hdf_group_KEYC-01-000018 | Keycloak must be configured to generate audit records overwriting the oldest audit records in a first-in-first-out manner.
  block:
    - name: Configure audit records overwriting the oldest audit records in a first-in-first-out manner
      community.general.keycloak_realm:
        auth_keycloak_url: "{{ keycloak_server_address }}"
        auth_client_id: "{{ keycloak_client_id }}"
        realm: "{{ keycloak_realm }}"
        auth_realm: "{{ keycloak_realm }}"
        auth_username: "{{ keycloak_admin_user }}"
        auth_password: "{{ keycloak_admin_password }}"
        state: present
        events_enabled: yes

    - name: Update events_listeners_list
      ansible.builtin.set_fact:
        events_listeners_list: "{{ events_listeners_list | union(['jboss-logging']) | unique }}"

    - name: Set spi events in keycloak.conf
      ansible.builtin.blockinfile:
        path: "{{ keycloak_home }}/conf/keycloak.conf"
        block: |
          spi-events-listener-jboss-logging-success-level=info
          spi-events-listener-jboss-logging-error-level=error
        state: present
        create: true
        marker: "# {mark} ANSIBLE MANAGED BLOCK - SPI EVENTS"
      register: result
      check_mode: false
      changed_when: false
#      ignore_errors: true

#    - name: Set quarkus syslog in quarkus.properties
#      ansible.builtin.blockinfile:
#        path: "{{ keycloak_home }}/conf/quarkus.properties"
#        block: |
#          quarkus.log.syslog.enable=true
#          quarkus.log.syslog.endpoint={{ quarkus_endpoint }}
#          quarkus.log.syslog.protocol={{ quarkus_protocol }}
#        state: present
#        create: true
#        marker: "# {mark} ANSIBLE MANAGED BLOCK - QUARKUS"
#      register: result
#      check_mode: false
#      changed_when: false
#      ignore_errors: true

# TODO: Then install the log service (if the log service is not already installed) on system
# TODO: Enable the log service
# TODO: Work with the centralized server's administrators to configure audit records to overwrite oldest records in a first-in-first-out manner
  tags:
    - cat2
    - medium
    - xccdf_hdf_group_KEYC-01-000018

- name: MEDIUM | xccdf_hdf_group_KEYC-01-000019 | Keycloak must be configured to queue audit records locally until communication is restored when any audit
    processing failure occurs.
  block:
    - name: Configure queuing of audit records locally
      community.general.keycloak_realm:
        auth_keycloak_url: "{{ keycloak_server_address }}"
        auth_client_id: "{{ keycloak_client_id }}"
        realm: "{{ keycloak_realm }}"
        auth_realm: "{{ keycloak_realm }}"
        auth_username: "{{ keycloak_admin_user }}"
        auth_password: "{{ keycloak_admin_password }}"
        state: present
        events_enabled: yes

    - name: Update enabled_event_types_list and events_listeners_list
      ansible.builtin.set_fact:
#        enabled_event_types_list: "{{ enabled_event_types_list | union(['']) | unique }}"
        events_listeners_list: "{{ events_listeners_list | union(['jboss-logging']) | unique }}"

    - name: Set spi events in keycloak.conf
      ansible.builtin.blockinfile:
        path: "{{ keycloak_home }}/conf/keycloak.conf"
        block: |
          spi-events-listener-jboss-logging-success-level=info
          spi-events-listener-jboss-logging-error-level=error
        state: present
        create: true
        marker: "# {mark} ANSIBLE MANAGED BLOCK - SPI EVENTS"
      register: result
      check_mode: false
      changed_when: false
#      ignore_errors: true

#    - name: Set quarkus syslog in quarkus.properties
#      ansible.builtin.blockinfile:
#        path: "{{ keycloak_home }}/conf/quarkus.properties"
#        block: |
#          quarkus.log.syslog.enable=true
#          quarkus.log.syslog.endpoint={{ quarkus_endpoint }}
#          quarkus.log.syslog.protocol={{ quarkus_protocol }}
#        state: present
#        create: true
#        marker: "# {mark} ANSIBLE MANAGED BLOCK - QUARKUS"
#      register: result
#      check_mode: false
#      changed_when: false
#      ignore_errors: true

# TODO: Then install the log service (if the log service is not already installed) on system
# TODO: Enable the log service
# TODO: Then use the following configuration in /etc/rsyslog.conf or create a file with the following content in the /etc/rsyslog.d/ directory
#
#    $ActionQueueType LinkedList
#
#    $ActionQueueFileName example_fwd
#
#    $ActionResumeRetryCount -1
#
#    $ActionQueueSaveOnShutdown on
  tags:
    - cat2
    - medium
    - xccdf_hdf_group_KEYC-01-000019

# TODO: Where does profile.properties go?
- name: MEDIUM | xccdf_hdf_group_KEYC-01-000021 | Keycloak must be configured to disable non-essential modules.
  ansible.builtin.blockinfile:
    path: "{{ keycloak_home }}/conf/profile.properties"
    block: |
      {{ profile_properties_features }}
    state: present
    create: true
    marker: "# {mark} ANSIBLE MANAGED BLOCK - PROFILE FEATURES"
  register: result
  check_mode: false
  changed_when: false
#  ignore_errors: true
  tags:
    - cat2
    - medium
    - xccdf_hdf_group_KEYC-01-000021

# TODO: applicable in a container?
#- name: "MEDIUM | xccdf_hdf_group_KEYC-01-000024 | Keycloak must be configured to prohibit or restrict the use of organization-defined functions, ports, protocols, and/or services, as defined in the PPSM CAL and vulnerability assessments."
#  ansible.builtin.shell: 
#  register: result
#  check_mode: false
#  changed_when: false
#  ignore_errors: true
#  when: xccdf_hdf_group_KEYC_01_000024
#  tags:
#    - cat2
#    - medium
#    - xccdf_hdf_group_KEYC-01-000024

#- name: MEDIUM | xccdf_hdf_group_KEYC-01-000026 | Keycloak must be configured to require multifactor authentication using Personal Identity Verification (PIV)
#    credentials for authenticating privileged user accounts.
#  tags:
#    - cat2
#    - medium
#    - xccdf_hdf_group_KEYC-01-000026

#- name: MEDIUM | xccdf_hdf_group_KEYC-01-000027 | Keycloak must be configured to require multifactor authentication using Common Access Card (CAC) Personal
#    Identity Verification (PIV) credentials for authenticating non-privileged user accounts.
#  tags:
#    - cat2
#    - medium
#    - xccdf_hdf_group_KEYC-01-000027

- name: "MEDIUM | xccdf_hdf_group_KEYC-01-000029 | Keycloak must be configured to enforce a minimum 15-character password length."
  block:
    - name: Set minimum character length as initial policy in password_policy_string
      ansible.builtin.set_fact:
        password_policy_string: "length(15)"
      when: not password_policy_string | length > 0

    - name: Append minimum character length to password_policy_string
      ansible.builtin.set_fact:
        password_policy_string: "{{ password_policy_string + ' and length(15)' }}"
      when:
        - password_policy_string | length > 0
        - '"length(15)" not in password_policy_string'
  tags:
    - cat2
    - medium
    - xccdf_hdf_group_KEYC-01-000029

- name: "MEDIUM | xccdf_hdf_group_KEYC-01-000030 | Keycloak must be configured to prohibit password reuse for a minimum of five generations."
  block:
    - name: Set minimum password history reuse length as initial policy in password_policy_string
      ansible.builtin.set_fact:
        password_policy_string: "passwordHistory(5)"
      when: not password_policy_string | length > 0

    - name: Append minimum password history reuse to password_policy_string
      ansible.builtin.set_fact:
        password_policy_string: "{{ password_policy_string + ' and passwordHistory(5)' }}"
      when:
        - password_policy_string | length > 0
        - '"passwordHistory(5)" not in password_policy_string'
  tags:
    - cat2
    - medium
    - xccdf_hdf_group_KEYC-01-000030

- name: "MEDIUM | xccdf_hdf_group_KEYC-01-000031 | Keycloak must be configured to enforce password complexity by requiring that at least one upper-case character be used."
  block:
    - name: Set minimum of 1 upper-case character as initial policy in password_policy_string
      ansible.builtin.set_fact:
        password_policy_string: "upperCase"
      when: not password_policy_string | length > 0

    - name: Append minimum of 1 upper-case character to password_policy_string
      ansible.builtin.set_fact:
        password_policy_string: "{{ password_policy_string + ' and upperCase' }}"
      when:
        - password_policy_string | length > 0
        - '"upperCase" not in password_policy_string'
  tags:
    - cat2
    - medium
    - xccdf_hdf_group_KEYC-01-000031

- name: "MEDIUM | xccdf_hdf_group_KEYC-01-000032 | Keycloak must be configured to enforce password complexity by requiring that at least one lower-case character be used."
  block:
    - name: Set minimum of 1 lower-case character as initial policy in password_policy_string
      ansible.builtin.set_fact:
        password_policy_string: "lowerCase"
      when: not password_policy_string | length > 0

    - name: Append minimum of 1 lower-case character to password_policy_string
      ansible.builtin.set_fact:
        password_policy_string: "{{ password_policy_string + ' and lowerCase' }}"
      when:
        - password_policy_string | length > 0
        - '"lowerCase" not in password_policy_string'
  tags:
    - cat2
    - medium
    - xccdf_hdf_group_KEYC-01-000032

- name: "MEDIUM | xccdf_hdf_group_KEYC-01-000033 | Keycloak must be configured to enforce password complexity by requiring that at least one numeric character be used."
  block:
    - name: Set minimum of 1 numeric character as initial policy in password_policy_string
      ansible.builtin.set_fact:
        password_policy_string: "digits"
      when: not password_policy_string | length > 0

    - name: Append minimum of 1 numeric character to password_policy_string
      ansible.builtin.set_fact:
        password_policy_string: "{{ password_policy_string + ' and digits' }}"
      when:
        - password_policy_string | length > 0
        - '"digits" not in password_policy_string'
  tags:
    - cat2
    - medium
    - xccdf_hdf_group_KEYC-01-000033

- name: "MEDIUM | xccdf_hdf_group_KEYC-01-000034 | Keycloak must be configured to enforce password complexity by requiring that at least one special character be used."
  block:
    - name: Set minimum of 1 special character as initial policy in password_policy_string
      ansible.builtin.set_fact:
        password_policy_string: "specialChars"
      when: not password_policy_string | length > 0

    - name: Append minimum of 1 special character to password_policy_string
      ansible.builtin.set_fact:
        password_policy_string: "{{ password_policy_string + ' and specialChars' }}"
      when:
        - password_policy_string | length > 0
        - '"specialChars" not in password_policy_string'
  tags:
    - cat2
    - medium
    - xccdf_hdf_group_KEYC-01-000034

# TODO: This causes an error (not part of provided Keycloak functionality) needs to be implemented after custom policy upload
#- name: "MEDIUM | xccdf_hdf_group_KEYC-01-000038 | Keycloak must be configured to enforce 24 hours as the minimum password lifetime."
#  block:
#    - name: Set minimum password lifetime as initial policy in password_policy_string
#      ansible.builtin.set_fact:
#        password_policy_string: "minimumPasswordLife(24)"
#      when: not password_policy_string | length > 0
#
#    - name: Append minimum password lifetime to password_policy_string
#      ansible.builtin.set_fact:
#        password_policy_string: "{{ password_policy_string + ' and minimumPasswordLife(24)' }}"
#      when:
#        - password_policy_string | length > 0
#        - '"minimumPasswordLife(24)" not in password_policy_string'
#  tags:
#    - cat2
#    - medium
#    - xccdf_hdf_group_KEYC-01-000038

- name: "MEDIUM | xccdf_hdf_group_KEYC-01-000039 | Keycloak must be configured to enforce a 60-day maximum password lifetime restriction."
  block:
    - name: Set maximum password lifetime as initial policy in password_policy_string
      ansible.builtin.set_fact:
        password_policy_string: "forceExpiredPasswordChange(60)"
      when: not password_policy_string | length > 0

    - name: Append maximum password lifetime to password_policy_string
      ansible.builtin.set_fact:
        password_policy_string: "{{ password_policy_string + ' and forceExpiredPasswordChange(60)' }}"
      when:
        - password_policy_string | length > 0
        - '"forceExpiredPasswordChange(60)" not in password_policy_string'
  tags:
    - cat2
    - medium
    - xccdf_hdf_group_KEYC-01-000039

- name: MEDIUM | xccdf_hdf_group_KEYC-01-000043 | Keycloak must be configured to map the authenticated identity to the user account for PKI-based authentication.
  community.general.keycloak_authentication:
    auth_keycloak_url: "{{ keycloak_server_address }}"
    auth_realm: "{{ keycloak_realm }}"
    auth_username: "{{ keycloak_admin_user }}"
    auth_password: "{{ keycloak_admin_password }}"
    realm: "{{ keycloak_realm }}"
    alias: "x509"
    copyFrom: "browser"
    authenticationExecutions:
      - providerId: "auth-x509-client-username-form"
        requirement: "REQUIRED"
        authenticationConfig:
          alias: "x509.execution.forms"
          config:
            x509-cert-auth.mapper-selection: true
    state: present
  when: xccdf_hdf_group_KEYC_01_000043
  tags:
    - cat2
    - medium
    - xccdf_hdf_group_KEYC-01-000043

- name: MEDIUM | xccdf_hdf_group_KEYC-01-000047 | Keycloak must be configured to notify the system administrators and ISSO when accounts are created.
  block:
    - name: Configure notifications when accounts are created
      community.general.keycloak_realm:
        auth_keycloak_url: "{{ keycloak_server_address }}"
        auth_client_id: "{{ keycloak_client_id }}"
        realm: "{{ keycloak_realm }}"
        auth_realm: "{{ keycloak_realm }}"
        auth_username: "{{ keycloak_admin_user }}"
        auth_password: "{{ keycloak_admin_password }}"
        state: present
        events_enabled: yes

#    - name: Update events_listeners_list
#      ansible.builtin.set_fact:
#        events_listeners_list: "{{ events_listeners_list | union(['']) | unique }}"
  tags:
    - cat2
    - medium
    - xccdf_hdf_group_KEYC-01-000047
    

- name: MEDIUM | xccdf_hdf_group_KEYC-01-000048 | Keycloak must be configured to notify the system administrators and ISSO when accounts are modified.
  block:
    - name: Configure notifications when accounts are modified
      community.general.keycloak_realm:
        auth_keycloak_url: "{{ keycloak_server_address }}"
        auth_client_id: "{{ keycloak_client_id }}"
        realm: "{{ keycloak_realm }}"
        auth_realm: "{{ keycloak_realm }}"
        auth_username: "{{ keycloak_admin_user }}"
        auth_password: "{{ keycloak_admin_password }}"
        state: present
        events_enabled: yes

#    - name: Update events_listeners_list
#      ansible.builtin.set_fact:
#        events_listeners_list: "{{ events_listeners_list | union(['']) | unique }}"
  tags:
    - cat2
    - medium
    - xccdf_hdf_group_KEYC-01-000048

- name: MEDIUM | xccdf_hdf_group_KEYC-01-000049 | Keycloak must be configured to notify the system administrators and ISSO for account disabling actions.
  block:
    - name: Configure notifications when accounts are disabled
      community.general.keycloak_realm:
        auth_keycloak_url: "{{ keycloak_server_address }}"
        auth_client_id: "{{ keycloak_client_id }}"
        realm: "{{ keycloak_realm }}"
        auth_realm: "{{ keycloak_realm }}"
        auth_username: "{{ keycloak_admin_user }}"
        auth_password: "{{ keycloak_admin_password }}"
        state: present
        events_enabled: yes

  #    - name: Update events_listeners_list
  #      ansible.builtin.set_fact:
  #        events_listeners_list: "{{ events_listeners_list | union(['']) | unique }}"
  tags:
    - cat2
    - medium
    - xccdf_hdf_group_KEYC-01-000049

- name: MEDIUM | xccdf_hdf_group_KEYC-01-000050 | Keycloak must be configured to notify the system administrators and ISSO for account removal actions.
  block:
    - name: Configure notifications when accounts are removed
      community.general.keycloak_realm:
        auth_keycloak_url: "{{ keycloak_server_address }}"
        auth_client_id: "{{ keycloak_client_id }}"
        realm: "{{ keycloak_realm }}"
        auth_realm: "{{ keycloak_realm }}"
        auth_username: "{{ keycloak_admin_user }}"
        auth_password: "{{ keycloak_admin_password }}"
        state: present
        events_enabled: yes

  #    - name: Update events_listeners_list
  #      ansible.builtin.set_fact:
  #        events_listeners_list: "{{ events_listeners_list | union(['']) | unique }}"
  tags:
    - cat2
    - medium
    - xccdf_hdf_group_KEYC-01-000050

- name: MEDIUM | xccdf_hdf_group_KEYC-01-000051 | Keycloak must be configured to automatically audit account enabling actions.
  community.general.keycloak_realm:
    auth_keycloak_url: "{{ keycloak_server_address }}"
    auth_client_id: "{{ keycloak_client_id }}"
    realm: "{{ keycloak_realm }}"
    auth_realm: "{{ keycloak_realm }}"
    auth_username: "{{ keycloak_admin_user }}"
    auth_password: "{{ keycloak_admin_password }}"
    state: present
    admin_events_enabled: yes
    admin_events_details_enabled: yes
  tags:
    - cat2
    - medium
    - xccdf_hdf_group_KEYC-01-000051

- name: MEDIUM | xccdf_hdf_group_KEYC-01-000052 | Keycloak must be configured to notify system administrators and ISSO of account enabling actions.
  block:
    - name: Configure notifications when accounts are enabled
      community.general.keycloak_realm:
        auth_keycloak_url: "{{ keycloak_server_address }}"
        auth_client_id: "{{ keycloak_client_id }}"
        realm: "{{ keycloak_realm }}"
        auth_realm: "{{ keycloak_realm }}"
        auth_username: "{{ keycloak_admin_user }}"
        auth_password: "{{ keycloak_admin_password }}"
        state: present
        events_enabled: yes

#    - name: Update events_listeners_list
#      ansible.builtin.set_fact:
#        events_listeners_list: "{{ events_listeners_list | union(['']) | unique }}"
  tags:
    - cat2
    - medium
    - xccdf_hdf_group_KEYC-01-000052

- name: MEDIUM | xccdf_hdf_group_KEYC-01-000054 | Keycloak must be configured to maintain locks on user accounts until released by an administrator.
  ansible.builtin.shell: |
    {{ path }}kcadm.sh update realms/{{ keycloak_realm }} -s 'bruteForceProtected=true'
    {{ path }}kcadm.sh update realms/{{ keycloak_realm }} -s 'permanentLockout=true'
  register: result
  check_mode: false
  changed_when: false
#  ignore_errors: true
  when: xccdf_hdf_group_KEYC_01_000054
  tags:
    - cat2
    - medium
    - xccdf_hdf_group_KEYC-01-000054

- name: MEDIUM | xccdf_hdf_group_KEYC-01-000055 | Keycloak must be configured to send audit records to a centralized audit server.
  block:
    - name: Configure to send audit records to a centralized audit server
      community.general.keycloak_realm:
        auth_keycloak_url: "{{ keycloak_server_address }}"
        auth_client_id: "{{ keycloak_client_id }}"
        realm: "{{ keycloak_realm }}"
        auth_realm: "{{ keycloak_realm }}"
        auth_username: "{{ keycloak_admin_user }}"
        auth_password: "{{ keycloak_admin_password }}"
        state: present
        events_enabled: yes

    - name: Update enabled_event_types_list and events_listeners_list
      ansible.builtin.set_fact:
#        enabled_event_types_list: "{{ enabled_event_types_list | union(['']) | unique }}"
        events_listeners_list: "{{ events_listeners_list | union(['jboss-logging']) | unique }}"

    - name: Set spi events in keycloak.conf
      ansible.builtin.blockinfile:
        path: "{{ keycloak_home }}/conf/keycloak.conf"
        block: |
          spi-events-listener-jboss-logging-success-level=info
          spi-events-listener-jboss-logging-error-level=error
        state: present
        create: true
        marker: "# {mark} ANSIBLE MANAGED BLOCK - SPI EVENTS"
      register: result
      check_mode: false
      changed_when: false
#      ignore_errors: true

  # - name: Set quarkus syslog in quarkus.properties
  #   ansible.builtin.blockinfile:
  #     path: "{{ keycloak_home }}/conf/quarkus.properties"
  #     block: |
  #       quarkus.log.syslog.enable=true
  #       quarkus.log.syslog.endpoint={{ quarkus_endpoint }}
  #       quarkus.log.syslog.protocol={{ quarkus_protocol }}
  #     state: present
  #     create: true
  #     marker: "# {mark} ANSIBLE MANAGED BLOCK - QUARKUS"
  #   register: result
  #   check_mode: false
  #   changed_when: false
  #   ignore_errors: true

# TODO: Then install the log service (if the log service is not already installed) on system
# TODO: Enable the log service
  tags:
    - cat2
    - medium
    - xccdf_hdf_group_KEYC-01-000055

- name: MEDIUM | xccdf_hdf_group_KEYC-01-000056 | Keycloak must be configured to use or map to Coordinated Universal Time (UTC) to record time stamps for audit records.
  block:
    - name: Configure to use or map to Coordinated Universal Time (UTC) to record time stamps for audit records
      community.general.keycloak_realm:
        auth_keycloak_url: "{{ keycloak_server_address }}"
        auth_client_id: "{{ keycloak_client_id }}"
        realm: "{{ keycloak_realm }}"
        auth_realm: "{{ keycloak_realm }}"
        auth_username: "{{ keycloak_admin_user }}"
        auth_password: "{{ keycloak_admin_password }}"
        state: present
        admin_events_enabled: yes
        admin_events_details_enabled: yes
        events_enabled: yes

    - name: Update enabled_event_types_list and events_listeners_list
      ansible.builtin.set_fact:
#        enabled_event_types_list: "{{ enabled_event_types_list | union(['']) | unique }}"
        events_listeners_list: "{{ events_listeners_list | union(['jboss-logging']) | unique }}"

    - name: Set spi events in keycloak.conf
      ansible.builtin.blockinfile:
        path: "{{ keycloak_home }}/conf/keycloak.conf"
        block: |
          spi-events-listener-jboss-logging-success-level=info
          spi-events-listener-jboss-logging-error-level=error
        state: present
        create: true
        marker: "# {mark} ANSIBLE MANAGED BLOCK - SPI EVENTS"
      register: result
      check_mode: false
      changed_when: false
#      ignore_errors: true

  # - name: Set quarkus syslog in quarkus.properties
  #   ansible.builtin.blockinfile:
  #     path: "{{ keycloak_home }}/conf/quarkus.properties"
  #     block: |
  #       quarkus.log.syslog.enable=true
  #       quarkus.log.syslog.endpoint={{ quarkus_endpoint }}
  #       quarkus.log.syslog.protocol={{ quarkus_protocol }}
  #       quarkus.log.syslog.format={{ quarkus_format }}
  #     state: present
  #     create: true
  #     marker: "# {mark} ANSIBLE MANAGED BLOCK - QUARKUS"
  #   register: result
  #   check_mode: false
  #   changed_when: false
  #   ignore_errors: true
# TODO: Enable the log service
  tags:
    - cat2
    - medium
    - xccdf_hdf_group_KEYC-01-000056

- name: MEDIUM | xccdf_hdf_group_KEYC-01-000057 | Keycloak must be configured with a minimum granularity of one second to record time stamps for audit records.
  block:
    - name: Configure minimum granularity of one second to record time stamps for audit records
      community.general.keycloak_realm:
        auth_keycloak_url: "{{ keycloak_server_address }}"
        auth_client_id: "{{ keycloak_client_id }}"
        realm: "{{ keycloak_realm }}"
        auth_realm: "{{ keycloak_realm }}"
        auth_username: "{{ keycloak_admin_user }}"
        auth_password: "{{ keycloak_admin_password }}"
        state: present
        admin_events_enabled: yes
        admin_events_details_enabled: yes
        events_enabled: yes

    - name: Update enabled_event_types_list and events_listeners_list
      ansible.builtin.set_fact:
#        enabled_event_types_list: "{{ enabled_event_types_list | union(['']) | unique }}"
        events_listeners_list: "{{ events_listeners_list | union(['jboss-logging']) | unique }}"

    - name: Set spi events in keycloak.conf
      ansible.builtin.blockinfile:
        path: "{{ keycloak_home }}/conf/keycloak.conf"
        block: |
          spi-events-listener-jboss-logging-success-level=info
          spi-events-listener-jboss-logging-error-level=error
        state: present
        create: true
        marker: "# {mark} ANSIBLE MANAGED BLOCK - SPI EVENTS"
      register: result
      check_mode: false
      changed_when: false
#      ignore_errors: true

    - name: Set log console format in keycloak.conf
      lineinfile:
        path: "{{ keycloak_home }}/conf/keycloak.conf"
        regexp: ^log-console-format
        line: log-console-format={{ log_console_format }}
        state: present
        create: true
      register: result
      check_mode: false
      changed_when: false
#      ignore_errors: true
  when: xccdf_hdf_group_KEYC_01_000057
  tags:
    - cat2
    - medium
    - xccdf_hdf_group_KEYC-01-000057
    

#- name: "MEDIUM | xccdf_hdf_group_KEYC-01-000059 | Keycloak must be configured to allow the use of a temporary password at initial logon with an immediate change to a permanent password."
#  ansible.builtin.shell:
#  register: result
#  check_mode: false
#  changed_when: false
#  ignore_errors: true
#  when: xccdf_hdf_group_KEYC_01_000059
#  tags:
#    - cat2
#    - medium
#    - xccdf_hdf_group_KEYC-01-000059

#- name: "MEDIUM | xccdf_hdf_group_KEYC-01-000064 | AAA Services must not be configured with shared accounts."
#  ansible.builtin.shell:
#  register: result
#  check_mode: false
#  changed_when: false
#  ignore_errors: true
#  when: xccdf_hdf_group_KEYC_01_000064
#  tags:
#    - cat2
#    - medium
#    - xccdf_hdf_group_KEYC-01-000064