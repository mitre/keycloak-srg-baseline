---
- name: Create a list variable for enabledEventTypes
  # TODO: Do I need to fetch existing enabledEventTypes first?
  set_fact:
    enabled_event_types_list: []

#- name: enabled_event_types list to string
#  set_fact:
#    enabledEventTypes: "{{ '[ ' + enabled_event_types_list | join(', ') + ' ]' }}"

- name: "MEDIUM | xccdf_hdf_group_KEYC-01-000005 | AUDIT | Keycloak must be configured to automatically audit account creation."
  shell: >
      {{path}}kcadm.sh update events/config -r {{keycloak_realm}} -s adminEventsEnabled=true
      -s adminEventsDetailsEnabled=true -s eventsEnabled=true -s 'eventsListeners=["jboss-logging"]'
  register: result
  check_mode: no
  changed_when: no
  ignore_errors: yes
  tags:
    - cat2
    - medium
    - xccdf_hdf_group_KEYC-01-000005
    - audit

- name: xccdf_hdf_group_KEYC-01-000005 | Update enabled_event_types list
  # TODO: Should this also include CLIENT_REGISTER?
  set_fact:
    enabled_event_types_list: "{{ enabled_event_types_list | union(['REGISTER']) | unique }}"
  tags:
    - cat2
    - medium
    - xccdf_hdf_group_KEYC-01-000005
    - audit

#- name: "MEDIUM | xccdf_hdf_group_KEYC-01-000005 | PATCH | Keycloak must be configured to automatically audit account creation."
#  shell:
#  tags:
#    - cat2
#    - medium
#    - xccdf_hdf_group_KEYC-01-000005
#    - patch

- name: "MEDIUM | xccdf_hdf_group_KEYC-01-000006 | AUDIT | Keycloak must be configured to automatically audit account modification."
  shell: >
    {{path}}kcadm.sh update events/config -r {{keycloak_realm}} -s adminEventsEnabled=true 
    -s adminEventsDetailsEnabled=true -s eventsEnabled=true -s 'eventsListeners=["jboss-logging"]' 
  register: result
  check_mode: no
  changed_when: no
  ignore_errors: yes
  tags:
    - cat2
    - medium
    - xccdf_hdf_group_KEYC-01-000006
    - audit

- name: xccdf_hdf_group_KEYC-01-000006 | Update enabled_event_types list
  set_fact:
    enabled_event_types_list: "{{ enabled_event_types_list | union(['UPDATE_PROFILE', 'UPDATE_EMAIL', 'UPDATE_PASSWORD']) | 
    unique }}"
  tags:
    - cat2
    - medium
    - xccdf_hdf_group_KEYC-01-000006
    - audit

#- name: "MEDIUM | xccdf_hdf_group_KEYC-01-000006 | PATCH | Keycloak must be configured to automatically audit account modification."
#  shell: 
#  tags:
#    - cat2
#    - medium
#    - xccdf_hdf_group_KEYC-01-000006
#    - patch

- name: "MEDIUM | xccdf_hdf_group_KEYC-01-000007 | AUDIT | Keycloak must be configured to automatically audit account disabling actions."
  shell: >
    {{path}}kcadm.sh update events/config -r {{keycloak_realm}} -s adminEventsEnabled=true 
    -s adminEventsDetailsEnabled=true -s 'eventsListeners=["jboss-logging"]'
  register: result
  check_mode: no
  changed_when: no
  ignore_errors: yes
  tags:
    - cat2
    - medium
    - xccdf_hdf_group_KEYC-01-000007
    - audit

#- name: "MEDIUM | xccdf_hdf_group_KEYC-01-000007 | PATCH | Keycloak must be configured to automatically audit account disabling actions."
#  shell:
#  tags:
#    - cat2
#    - medium
#    - xccdf_hdf_group_KEYC-01-000007
#    - patch

- name: "MEDIUM | xccdf_hdf_group_KEYC-01-000008 | AUDIT | Keycloak must be configured to automatically audit account removal actions."
  shell: >
    {{path}}kcadm.sh update events/config -r {{keycloak_realm}} -s adminEventsEnabled=true 
    -s adminEventsDetailsEnabled=true -s eventsEnabled=true -s 'eventsListeners=["jboss-logging"]'
  register: result
  check_mode: no
  changed_when: no
  ignore_errors: yes
  tags:
    - cat2
    - medium
    - xccdf_hdf_group_KEYC-01-000008
    - audit

- name: xccdf_hdf_group_KEYC-01-000008 | Update enabled_event_types list
  set_fact:
    enabled_event_types_list: "{{ enabled_event_types_list | union(['DELETE_ACCOUNT']) | unique }}"
  tags:
    - cat2
    - medium
    - xccdf_hdf_group_KEYC-01-000008
    - audit

#- name: "MEDIUM | xccdf_hdf_group_KEYC-01-000008 | PATCH | Keycloak must be configured to automatically audit account removal actions."
#  shell: 
#  tags:
#    - cat2
#    - medium
#    - xccdf_hdf_group_KEYC-01-000008
#    - patch

- name: "MEDIUM | xccdf_hdf_group_KEYC-01-000009 | AUDIT | Keycloak must be configured to automatically lock user accounts after three consecutive invalid logon attempts within a 15-minute time period."
  shell: |
    {{path}}kcadm.sh update realms/{{keycloak_realm}} -s 'bruteForceProtected=true'
    {{path}}kcadm.sh update realms/{{keycloak_realm}} -s 'failureFactor={{failure_factor}}'
    {{path}}kcadm.sh update realms/{{keycloak_realm}} -s 'maxDeltaTimeSeconds={{max_delta_time_seconds}}'
  register: result
  check_mode: no
  changed_when: no
  ignore_errors: yes
  tags:
    - cat2
    - medium
    - xccdf_hdf_group_KEYC-01-000009
    - audit

#- name: "MEDIUM | xccdf_hdf_group_KEYC-01-000009 | PATCH | Keycloak must be configured to automatically lock user accounts after three consecutive invalid logon attempts within a 15-minute time period."
#  shell: 
#  tags:
#    - cat2
#    - medium
#    - xccdf_hdf_group_KEYC-01-000009
#    - patch

- name: "MEDIUM | xccdf_hdf_group_KEYC-01-000010 | AUDIT | Keycloak must be configured to audit each authentication and authorization transaction."
  shell: >
    {{path}}kcadm.sh update events/config -r {{keycloak_realm}} -s adminEventsEnabled=true 
    -s adminEventsDetailsEnabled=true -s eventsEnabled=true -s 'eventsListeners=["jboss-logging"]'
  register: result
  check_mode: no
  changed_when: no
  ignore_errors: yes
  tags:
    - cat2
    - medium
    - xccdf_hdf_group_KEYC-01-000010
    - audit

# TODO: need to determine appropriate event types
#- name: xccdf_hdf_group_KEYC-01-000010 | Update enabled_event_types list
#  set_fact:
#        enabled_event_types_list: "{{ enabled_event_types_list | union(['']) |unique }}"
#  tags:
#    - cat2
#    - medium
#    - xccdf_hdf_group_KEYC-01-000010
#    - audit

#- name: "MEDIUM | xccdf_hdf_group_KEYC-01-000010 | PATCH | Keycloak must be configured to audit each authentication and authorization transaction."
#  shell: 
#  tags:
#    - cat2
#    - medium
#    - xccdf_hdf_group_KEYC-01-000010
#    - patch

# TODO: enabledEventTypes part probably isn't correct here
- name: "MEDIUM | xccdf_hdf_group_KEYC-01-000011 | AUDIT | Keycloak configuration audit records must identify what type of events occurred."
  shell: >
    {{path}}kcadm.sh update events/config -r {{keycloak_realm}} -s adminEventsEnabled=true 
    -s adminEventsDetailsEnabled=true -s eventsEnabled=true -s 'eventsListeners=["jboss-logging"]'
    -s 'enabledEventTypes={{enabled_event_types_string}}'
  register: result
  check_mode: no
  changed_when: no
  ignore_errors: yes
  tags:
    - cat2
    - medium
    - xccdf_hdf_group_KEYC-01-000011
    - audit

#- name: "MEDIUM | xccdf_hdf_group_KEYC-01-000011 | PATCH | Keycloak configuration audit records must identify what type of events occurred."
#  shell: 
#  tags:
#    - cat2
#    - medium
#    - xccdf_hdf_group_KEYC-01-000011
#    - patch

# TODO: enabledEventTypes part probably isn't correct here
- name: "MEDIUM | xccdf_hdf_group_KEYC-01-000012_part1 | AUDIT | Keycloak configuration audit records must identify when (date and time) the events occurred."
  shell: >
    {{path}}kcadm.sh update events/config -r {{keycloak_realm}} -s adminEventsEnabled=true
    -s adminEventsDetailsEnabled=true -s eventsEnabled=true -s 'eventsListeners=["jboss-logging"]'
    -s 'enabledEventTypes={{enabled_event_types_string}}'
  register: result
  check_mode: no
  changed_when: no
  ignore_errors: yes
  tags:
    - cat2
    - medium
    - xccdf_hdf_group_KEYC-01-000012
    - audit

- name: "MEDIUM | xccdf_hdf_group_KEYC-01-000012_part2 | AUDIT | Keycloak configuration audit records must identify when (date and time) the events occurred."
  lineinfile:
    path: /opt/keycloak/conf/keycloak.conf
    regexp: '^log-console-format'
    line: log-console-format={{log_console_format}}
    state: present
    create: yes
  register: result
  check_mode: no
  changed_when: no
  ignore_errors: yes
  tags:
    - cat2
    - medium
    - xccdf_hdf_group_KEYC-01-000012
    - audit

#- name: "MEDIUM | xccdf_hdf_group_KEYC-01-000012 | PATCH | Keycloak configuration audit records must identify when (date and time) the events occurred."
#  shell:
#  tags:
#    - cat2
#    - medium
#    - xccdf_hdf_group_KEYC-01-000012
#    - patch

- name: "MEDIUM | xccdf_hdf_group_KEYC-01-000013 | AUDIT | Keycloak configuration audit records must identify where the events occurred."
  shell: >
    {{path}}kcadm.sh update events/config -r {{keycloak_realm}} -s adminEventsEnabled=true
    -s adminEventsDetailsEnabled=true -s eventsEnabled=true -s 'eventsListeners=["jboss-logging"]'
  register: result
  check_mode: no
  changed_when: no
  ignore_errors: yes
  tags:
    - cat2
    - medium
    - xccdf_hdf_group_KEYC-01-000013
    - audit

#- name: "MEDIUM | xccdf_hdf_group_KEYC-01-000013 | PATCH | Keycloak configuration audit records must identify where the events occurred."
#  shell: 
#  tags:
#    - cat2
#    - medium
#    - xccdf_hdf_group_KEYC-01-000013
#    - patch

- name: "MEDIUM | xccdf_hdf_group_KEYC-01-000014 | AUDIT | Keycloak configuration audit records must identify the source of the events."
  shell: >
    {{path}}kcadm.sh update events/config -r {{keycloak_realm}} -s adminEventsEnabled=true
    -s adminEventsDetailsEnabled=true -s eventsEnabled=true -s 'eventsListeners=["jboss-logging"]'
  register: result
  check_mode: no
  changed_when: no
  ignore_errors: yes
  tags:
    - cat2
    - medium
    - xccdf_hdf_group_KEYC-01-000014
    - audit

#- name: "MEDIUM | xccdf_hdf_group_KEYC-01-000014 | PATCH | Keycloak configuration audit records must identify the source of the events."
#  shell: 
#  tags:
#    - cat2
#    - medium
#    - xccdf_hdf_group_KEYC-01-000014
#    - patch

# TODO: enabledEventTypes part probably isn't correct here
- name: "MEDIUM | xccdf_hdf_group_KEYC-01-000015 | AUDIT | Keycloak configuration audit records must identify the outcome of the events."
  shell: >
    {{path}}kcadm.sh update events/config -r {{keycloak_realm}} -s adminEventsEnabled=true
    -s adminEventsDetailsEnabled=true -s eventsEnabled=true -s 'eventsListeners=["jboss-logging"]'
    -s 'enabledEventTypes={{enabled_event_types_string}}'
  register: result
  check_mode: no
  changed_when: no
  ignore_errors: yes
  tags:
    - cat2
    - medium
    - xccdf_hdf_group_KEYC-01-000015
    - audit

#- name: "MEDIUM | xccdf_hdf_group_KEYC-01-000015 | PATCH | Keycloak configuration audit records must identify the outcome of the events."
#  shell: 
#  tags:
#    - cat2
#    - medium
#    - xccdf_hdf_group_KEYC-01-000015
#    - patch

- name: "MEDIUM | xccdf_hdf_group_KEYC-01-000016 | AUDIT | Keycloak configuration audit records must identify any individual user or process associated with the event."
  shell: >
    {{path}}kcadm.sh update events/config -r {{keycloak_realm}} -s eventsEnabled=true -s 'eventsListeners=["jboss-logging"]'
  register: result
  check_mode: no
  changed_when: no
  ignore_errors: yes
  tags:
    - cat2
    - medium
    - xccdf_hdf_group_KEYC-01-000016
    - audit

#- name: "MEDIUM | xccdf_hdf_group_KEYC-01-000016 | PATCH | Keycloak configuration audit records must identify any individual user or process associated with the event."
#  shell: 
#  tags:
#    - cat2
#    - medium
#    - xccdf_hdf_group_KEYC-01-000016
#    - patch

# TODO: enabledEventTypes part probably isn't correct here
- name: "MEDIUM | xccdf_hdf_group_KEYC-01-000017_part1 | AUDIT | Keycloak must be configured to alert the SA and ISSO when any audit processing failure occurs."
  shell: >
    {{path}}kcadm.sh update events/config -r {{keycloak_realm}} -s eventsEnabled=true -s 'eventsListeners=["jboss-logging"]'
    -s 'enabledEventTypes={{enabled_event_types_string}}'
  register: result
  check_mode: no
  changed_when: no
  ignore_errors: yes
  tags:
    - cat2
    - medium
    - xccdf_hdf_group_KEYC-01-000017
    - audit

- name: "MEDIUM | xccdf_hdf_group_KEYC-01-000017_part2 | AUDIT | Keycloak must be configured to alert the SA and ISSO when any audit processing failure occurs."
  blockinfile:
    path: /opt/keycloak/conf/keycloak.conf
    block: |
      spi-events-listener-jboss-logging-success-level=info
      spi-events-listener-jboss-logging-error-level=error
    state: present
    create: yes
    marker: "# {mark} ANSIBLE MANAGED BLOCK - SPI EVENTS"
  register: result
  check_mode: no
  changed_when: no
  ignore_errors: yes
  tags:
    - cat2
    - medium
    - xccdf_hdf_group_KEYC-01-000017
    - audit

- name: "MEDIUM | xccdf_hdf_group_KEYC-01-000017_part3 | AUDIT | Keycloak must be configured to alert the SA and ISSO when any audit processing failure occurs."
  blockinfile:
    path: /opt/keycloak/conf/quarkus.properties
    block: |
      quarkus.log.syslog.enable=true
      quarkus.log.syslog.endpoint={{quarkus_endpoint}}
      quarkus.log.syslog.protocol={{quarkus_protocol}}
    state: present
    create: yes
    marker: "# {mark} ANSIBLE MANAGED BLOCK - QUARKUS"
  register: result
  check_mode: no
  changed_when: no
  ignore_errors: yes
  tags:
    - cat2
    - medium
    - xccdf_hdf_group_KEYC-01-000017
    - audit

- name: "MEDIUM | xccdf_hdf_group_KEYC-01-000017_part4 | AUDIT | Keycloak must be configured to alert the SA and ISSO when any audit processing failure occurs."
  lineinfile:
    path: /etc/audit/auditd.conf
    regexp: '^action_mail_acct = '
    line: action_mail_acct = {{action_mail_account}}
    state: present
    create: yes
  register: result
  check_mode: no
  changed_when: no
  ignore_errors: yes
  tags:
    - cat2
    - medium
    - xccdf_hdf_group_KEYC-01-000017
    - audit

#- name: "MEDIUM | xccdf_hdf_group_KEYC-01-000017 | PATCH | Keycloak must be configured to alert the SA and ISSO when any audit processing failure occurs."
#  shell: 
#  tags:
#    - cat2
#    - medium
#    - xccdf_hdf_group_KEYC-01-000017
#    - patch

# TODO: enabledEventTypes part probably isn't correct here
- name: "MEDIUM | xccdf_hdf_group_KEYC-01-000018_part1 | AUDIT | Keycloak must be configured to generate audit records overwriting the oldest audit records in a first-in-first-out manner."
  shell: >
    {{path}}kcadm.sh update events/config -r {{keycloak_realm}} -s eventsEnabled=true -s 'eventsListeners=["jboss-logging"]'
    -s 'enabledEventTypes={{enabled_event_types_string}}'
  register: result
  check_mode: no
  changed_when: no
  ignore_errors: yes
  tags:
    - cat2
    - medium
    - xccdf_hdf_group_KEYC-01-000018
    - audit

- name: "MEDIUM | xccdf_hdf_group_KEYC-01-000018_part2 | AUDIT | Keycloak must be configured to generate audit records overwriting the oldest audit records in a first-in-first-out manner."
  blockinfile:
    path: /opt/keycloak/conf/keycloak.conf
    block: |
      spi-events-listener-jboss-logging-success-level=info
      spi-events-listener-jboss-logging-error-level=error
    state: present
    create: yes
    marker: "# {mark} ANSIBLE MANAGED BLOCK - SPI EVENTS"
  register: result
  check_mode: no
  changed_when: no
  ignore_errors: yes
  tags:
    - cat2
    - medium
    - xccdf_hdf_group_KEYC-01-000018
    - audit

- name: "MEDIUM | xccdf_hdf_group_KEYC-01-000018_part3 | AUDIT | Keycloak must be configured to generate audit records overwriting the oldest audit records in a first-in-first-out manner."
  blockinfile:
    path: /opt/keycloak/conf/quarkus.properties
    block: |
      quarkus.log.syslog.enable=true
      quarkus.log.syslog.endpoint={{quarkus_endpoint}}
      quarkus.log.syslog.protocol={{quarkus_protocol}}
    state: present
    create: yes
    marker: "# {mark} ANSIBLE MANAGED BLOCK - QUARKUS"
  register: result
  check_mode: no
  changed_when: no
  ignore_errors: yes
  tags:
    - cat2
    - medium
    - xccdf_hdf_group_KEYC-01-000018
    - audit

# TODO: syslog is configured to alert the SA and ISSO when any audit processing failure occurs?

#- name: "MEDIUM | xccdf_hdf_group_KEYC-01-000018 | PATCH | Keycloak must be configured to generate audit records overwriting the oldest audit records in a first-in-first-out manner."
#  shell: 
#  tags:
#    - cat2
#    - medium
#    - xccdf_hdf_group_KEYC-01-000018
#    - patch

# TODO: enabledEventTypes part probably isn't correct here
- name: "MEDIUM | xccdf_hdf_group_KEYC-01-000019_part1 | AUDIT | Keycloak must be configured to queue audit records locally until communication is restored when any audit processing failure occurs."
  shell: >
    {{path}}kcadm.sh update events/config -r {{keycloak_realm}} -s eventsEnabled=true -s 'eventsListeners=["jboss-logging"]'
    -s 'enabledEventTypes={{enabled_event_types_string}}'
  register: result
  check_mode: no
  changed_when: no
  ignore_errors: yes
  tags:
    - cat2
    - medium
    - xccdf_hdf_group_KEYC-01-000019
    - audit

- name: "MEDIUM | xccdf_hdf_group_KEYC-01-000019_part2 | AUDIT | Keycloak must be configured to queue audit records locally until communication is restored when any audit processing failure occurs."
  blockinfile:
    path: /opt/keycloak/conf/keycloak.conf
    block: |
      spi-events-listener-jboss-logging-success-level=info
      spi-events-listener-jboss-logging-error-level=error
    state: present
    create: yes
    marker: "# {mark} ANSIBLE MANAGED BLOCK - SPI EVENTS"
  register: result
  check_mode: no
  changed_when: no
  ignore_errors: yes
  tags:
    - cat2
    - medium
    - xccdf_hdf_group_KEYC-01-000019
    - audit

- name: "MEDIUM | xccdf_hdf_group_KEYC-01-000019_part3 | AUDIT | Keycloak must be configured to queue audit records locally until communication is restored when any audit processing failure occurs."
  blockinfile:
    path: /opt/keycloak/conf/keycloak.conf
    block: |
      quarkus.log.syslog.enable=true
      quarkus.log.syslog.endpoint={{quarkus_endpoint}}
      quarkus.log.syslog.protocol={{quarkus_protocol}}
    state: present
    create: yes
    marker: "# {mark} ANSIBLE MANAGED BLOCK - QUARKUS"
  register: result
  check_mode: no
  changed_when: no
  ignore_errors: yes
  tags:
    - cat2
    - medium
    - xccdf_hdf_group_KEYC-01-000019
    - audit

# TODO: log service is enabled on the system?

#- name: "MEDIUM | xccdf_hdf_group_KEYC-01-000019 | PATCH | Keycloak must be configured to queue audit records locally until communication is restored when any audit processing failure occurs."
#  shell: 
#  tags:
#    - cat2
#    - medium
#    - xccdf_hdf_group_KEYC-01-000019
#    - patch

# TODO: Where does profile.properties go?
- name: "MEDIUM | xccdf_hdf_group_KEYC-01-000021 | AUDIT | Keycloak must be configured to disable non-essential modules."
  blockinfile:
    path: /opt/keycloak/conf/profile.properties
    block: |
      {{profile_properties_features}}
    state: present
    create: yes
    marker: "# {mark} ANSIBLE MANAGED BLOCK - PROFILE FEATURES"
  register: result
  check_mode: no
  changed_when: no
  ignore_errors: yes
  tags:
    - cat2
    - medium
    - xccdf_hdf_group_KEYC-01-000021
    - audit

#- name: "MEDIUM | xccdf_hdf_group_KEYC-01-000021 | PATCH | Keycloak must be configured to disable non-essential modules."
#  shell: 
#  tags:
#    - cat2
#    - medium
#    - xccdf_hdf_group_KEYC-01-000021
#    - patch

# TODO: applicable in a container?
#- name: "MEDIUM | xccdf_hdf_group_KEYC-01-000024 | AUDIT | Keycloak must be configured to prohibit or restrict the use of organization-defined functions, ports, protocols, and/or services, as defined in the PPSM CAL and vulnerability assessments."
#  shell: 
#  register: result
#  check_mode: no
#  changed_when: no
#  ignore_errors: yes
#  tags:
#    - cat2
#    - medium
#    - xccdf_hdf_group_KEYC-01-000024
#    - audit
#
#- name: "MEDIUM | xccdf_hdf_group_KEYC-01-000024 | PATCH | Keycloak must be configured to prohibit or restrict the use of organization-defined functions, ports, protocols, and/or services, as defined in the PPSM CAL and vulnerability assessments."
#  shell: 
#  tags:
#    - cat2
#    - medium
#    - xccdf_hdf_group_KEYC-01-000024
#    - patch

- name: "MEDIUM | xccdf_hdf_group_KEYC-01-000026 | AUDIT | Keycloak must be configured to require multifactor authentication using Personal Identity Verification (PIV) credentials for authenticating privileged user accounts."
  block:
    - name: get current browser flows
      shell: >
        {{path}}kcadm.sh get authentication/flows/browser/executions
      register: initial_browser_flows
      ignore_errors: no

    - name: set initial browser flows in json
      set_fact:
        initial_json_browser_flows: "{{ initial_browser_flows.stdout | from_json | community.general.json_query('[*]') }}"

    - debug:
        msg: initial browser flows="{{initial_json_browser_flows}}"

    - name: set initial browser flows' providerIds to array
      set_fact:
        initial_browser_provider_ids: "{{ initial_json_browser_flows | community.general.json_query('[*].providerId') }}"

    - debug:
        msg: "{{initial_browser_provider_ids}}"

    # The following is executed on the condition that ... was not found
    - name: get current authentication flows
      shell: >
        {{path}}kcadm.sh get authentication/flows
      register: initial_flows
      when: '"auth-otp-form" not in initial_browser_provider_ids'
      ignore_errors: no

    - name: set initial flows in json
      set_fact:
        initial_json_flows: "{{ initial_flows.stdout | from_json | community.general.json_query('[*]') }}"
      when: '"auth-otp-form" not in initial_browser_provider_ids'

    - debug:
        msg: initial flows="{{initial_json_flows}}"
      when: '"auth-otp-form" not in initial_browser_provider_ids'

    - name: set initial flows' ids to array
      set_fact:
        initial_ids: "{{ initial_json_flows | community.general.json_query('[*].id') }}"
      when: '"auth-otp-form" not in initial_browser_provider_ids'

    - debug:
        msg: "{{initial_ids}}"
      when: '"auth-otp-form" not in initial_browser_provider_ids'

    - name: create a copy of browser authentication flow
      shell: |
        {{path}}kcadm.sh create authentication/flows/browser/copy -s \"providerId\"=\"basic_flow\"
        {{path}}kcadm.sh get authentication/flows
      when: '"auth-otp-form" not in initial_browser_provider_ids'
      register: new_flows
      check_mode: no
      changed_when: no
      ignore_errors: no

    - name: set new flows in json
      set_fact:
        new_json_flows: "{{ new_flows.stdout | from_json | community.general.json_query('[*]') }}"
      when: '"auth-otp-form" not in initial_browser_provider_ids'

    - debug:
        msg: "{{new_json_flows}}"
      when: '"auth-otp-form" not in initial_browser_provider_ids'

    - name: new flows' ids to array
      set_fact:
        new_ids: "{{ new_json_flows | community.general.json_query('[*].id') }}"
      when: '"auth-otp-form" not in initial_browser_provider_ids'

    - debug:
        msg: "{{new_ids}}"
      when: '"auth-otp-form" not in initial_browser_provider_ids'

    - name: display authentication flow id differences
      ansible.utils.fact_diff:
        before: "{{initial_ids}}"
        after: "{{new_ids}}"
      when: '"auth-otp-form" not in initial_browser_provider_ids'

    - debug:
        msg: "new id: {{ new_ids | difference(initial_ids) | list }}"
      when: '"auth-otp-form" not in initial_browser_provider_ids'

    - name: set variable for new flow id
      set_fact:
        new_id: "{{ new_ids | difference(initial_ids) | list }}"
      when: '"auth-otp-form" not in initial_browser_provider_ids'

    - name: update new flow's alias
      shell: |
        {{path}}kcadm.sh update authentication/flows/{{new_id.0}} -s \"alias\"=\"auth_flow_alias\"
      ignore_errors: no
      when: '"auth-otp-form" not in initial_browser_provider_ids'

    - name: update new flow's execution
      shell: |
        {{path}}kcadm.sh create authentication/flows/auth_flow_alias/executions/execution -s \"provider\"=\"auth-otp-form\"
      ignore_errors: no
      when: '"auth-otp-form" not in initial_browser_provider_ids'

    - name: get new flows execution
      shell: |
        {{path}}kcadm.sh get authentication/flows/auth_flow_alias/executions
      register: custom_flow
      ignore_errors: no
      when: '"auth-otp-form" not in initial_browser_provider_ids'

    - name: set new flow in json
      set_fact:
        custom_json_flow: "{{ custom_flow.stdout | from_json | community.general.json_query('[*]') }}"
      when: '"auth-otp-form" not in initial_browser_provider_ids'

    - debug:
        msg: custom flow="{{custom_json_flow}}"
      when: '"auth-otp-form" not in initial_browser_provider_ids'

    - name: get auth-otp execution id
      set_fact:
        loop: "{{ custom_json_flow | community.general.json_query(auth_otp_id_query) }}"
      vars:
        auth_otp_id_query: "[?providerId=='auth-otp-form'].id"
      register: auth-otp
      when: '"auth-otp-form" not in initial_browser_provider_ids'

    - name: display auth-otp execution id
      debug:
        var: item
      loop: "{{ custom_json_flow | community.general.json_query(auth_otp_id_query) }}"
      vars:
        auth_otp_id_query: "[?providerId=='auth-otp-form'].id"
      when: '"auth-otp-form" not in initial_browser_provider_ids'

#    - name:
  tags:
    - cat2
    - medium
    - xccdf_hdf_group_KEYC-01-000026
    - audit








#- name: "MEDIUM | xccdf_hdf_group_KEYC-01-000026 | PATCH | Keycloak must be configured to require multifactor authentication using Personal Identity Verification (PIV) credentials for authenticating privileged user accounts."
#  shell: 
#  tags:
#    - cat2
#    - medium
#    - xccdf_hdf_group_KEYC-01-000026
#    - patch

- name: "MEDIUM | xccdf_hdf_group_KEYC-01-000027 | AUDIT | Keycloak must be configured to require multifactor authentication using Common Access Card (CAC) Personal Identity Verification (PIV) credentials for authenticating non-privileged user accounts."
  block:
    - name: get current browser flows
      shell: >
        {{path}}kcadm.sh get authentication/flows/browser/executions
      register: initial_browser_flows
      ignore_errors: no

    - name: set initial browser flows in json
      set_fact:
        initial_json_browser_flows: "{{ initial_browser_flows.stdout | from_json | community.general.json_query('[*]') }}"

    - debug:
        msg: initial browser flows="{{initial_json_browser_flows}}"

    - name: set initial browser flows' providerIds to array
      set_fact:
        initial_browser_provider_ids: "{{ initial_json_browser_flows | community.general.json_query('[*].providerId') }}"

    - debug:
        msg: "{{initial_browser_provider_ids}}"

    # The following is executed on the condition that ... was not found
    - name: get current authentication flows
      shell: >
        {{path}}kcadm.sh get authentication/flows
      register: initial_flows
      when: '"auth-x509-client-username-form" not in initial_browser_provider_ids'
      ignore_errors: no

    - name: set initial flows in json
      set_fact:
        initial_json_flows: "{{ initial_flows.stdout | from_json | community.general.json_query('[*]') }}"
      when: '"auth-x509-client-username-form" not in initial_browser_provider_ids'

    - debug:
        msg: initial flows="{{initial_json_flows}}"
      when: '"auth-x509-client-username-form" not in initial_browser_provider_ids'

    - name: set initial flows' ids to array
      set_fact:
        initial_ids: "{{ initial_json_flows | community.general.json_query('[*].id') }}"
      when: '"auth-x509-client-username-form" not in initial_browser_provider_ids'

    - debug:
        msg: "{{initial_ids}}"
      when: '"auth-x509-client-username-form" not in initial_browser_provider_ids'

    - name: create a copy of browser authentication flow
      shell: |
        {{path}}kcadm.sh create authentication/flows/browser/copy -s \"providerId\"=\"basic_flow\"
        {{path}}kcadm.sh get authentication/flows
      when: '"auth-x509-client-username-form" not in initial_browser_provider_ids'
      register: new_flows
      check_mode: no
      changed_when: no
      ignore_errors: no

    - name: set new flows in json
      set_fact:
        new_json_flows: "{{ new_flows.stdout | from_json | community.general.json_query('[*]') }}"
      when: '"auth-x509-client-username-form" not in initial_browser_provider_ids'

    - debug:
        msg: "{{new_json_flows}}"
      when: '"auth-x509-client-username-form" not in initial_browser_provider_ids'

    - name: new flows' ids to array
      set_fact:
        new_ids: "{{ new_json_flows | community.general.json_query('[*].id') }}"
      when: '"auth-x509-client-username-form" not in initial_browser_provider_ids'

    - debug:
        msg: "{{new_ids}}"
      when: '"auth-x509-client-username-form" not in initial_browser_provider_ids'

    - name: display authentication flow id differences
      ansible.utils.fact_diff:
        before: "{{initial_ids}}"
        after: "{{new_ids}}"
      when: '"auth-x509-client-username-form" not in initial_browser_provider_ids'

    - debug:
        msg: "new id: {{ new_ids | difference(initial_ids) | list }}"
      when: '"auth-x509-client-username-form" not in initial_browser_provider_ids'

    - name: set variable for new flow id
      set_fact:
        new_id: "{{ new_ids | difference(initial_ids) | list }}"
      when: '"auth-x509-client-username-form" not in initial_browser_provider_ids'

    - name: update new flow's alias
      shell: |
        {{path}}kcadm.sh update authentication/flows/{{new_id.0}} -s \"alias\"=\"flow_alias\"
      ignore_errors: no
      when: '"auth-x509-client-username-form" not in initial_browser_provider_ids'

    - name: update new flow's execution
      shell: |
        {{path}}kcadm.sh create authentication/flows/flow_alias/executions/execution -s \"provider\"=\"auth-x509-client-username-form\"
      ignore_errors: no
      when: '"auth-x509-client-username-form" not in initial_browser_provider_ids'

    - name: get new flows execution
      shell: |
        {{path}}kcadm.sh get authentication/flows/flow_alias/executions
      register: custom_flow
      ignore_errors: no
      when: '"auth-x509-client-username-form" not in initial_browser_provider_ids'

    - name: set new flow in json
      set_fact:
        custom_json_flow: "{{ custom_flow.stdout | from_json | community.general.json_query('[*]') }}"
      when: '"auth-x509-client-username-form" not in initial_browser_provider_ids'

    - debug:
        msg: custom flow="{{custom_json_flow}}"
      when: '"auth-x509-client-username-form" not in initial_browser_provider_ids'

    - name: get x509 execution id
      set_fact:
        loop: "{{ custom_json_flow | community.general.json_query(x509_id_query) }}"
      vars:
        x509_id_query: "[?providerId=='auth-x509-client-username-form'].id"
      register: x509_id
      when: '"auth-x509-client-username-form" not in initial_browser_provider_ids'

    - name: display x509 execution id
      debug:
        var: item
      loop: "{{ custom_json_flow | community.general.json_query(x509_id_query) }}"
      vars:
        x509_id_query: "[?providerId=='auth-x509-client-username-form'].id"
      when: '"auth-x509-client-username-form" not in initial_browser_provider_ids'

  #    - name:
  tags:
    - cat2
    - medium
    - xccdf_hdf_group_KEYC-01-000027
    - audit

#- name: "MEDIUM | xccdf_hdf_group_KEYC-01-000027 | PATCH | Keycloak must be configured to require multifactor authentication using Common Access Card (CAC) Personal Identity Verification (PIV) credentials for authenticating non-privileged user accounts."
#  shell: 
#  tags:
#    - cat2
#    - medium
#    - xccdf_hdf_group_KEYC-01-000027
#    - patch
#
#- name: "MEDIUM | xccdf_hdf_group_KEYC-01-000029 | AUDIT | Keycloak must be configured to enforce a minimum 15-character password length."
#  shell: 
#  register: result
#  check_mode: no
#  changed_when: no
#  ignore_errors: yes
#  tags:
#    - cat2
#    - medium
#    - xccdf_hdf_group_KEYC-01-000029
#    - audit
#
#- name: "MEDIUM | xccdf_hdf_group_KEYC-01-000029 | PATCH | Keycloak must be configured to enforce a minimum 15-character password length."
#  shell: 
#  tags:
#    - cat2
#    - medium
#    - xccdf_hdf_group_KEYC-01-000029
#    - patch
#
#- name: "MEDIUM | xccdf_hdf_group_KEYC-01-000030 | AUDIT | Keycloak must be configured to prohibit password reuse for a minimum of five generations."
#  shell: 
#  register: result
#  check_mode: no
#  changed_when: no
#  ignore_errors: yes
#  tags:
#    - cat2
#    - medium
#    - xccdf_hdf_group_KEYC-01-000030
#    - audit
#
#- name: "MEDIUM | xccdf_hdf_group_KEYC-01-000030 | PATCH | Keycloak must be configured to prohibit password reuse for a minimum of five generations."
#  shell: 
#  tags:
#    - cat2
#    - medium
#    - xccdf_hdf_group_KEYC-01-000030
#    - patch
#
#- name: "MEDIUM | xccdf_hdf_group_KEYC-01-000031 | AUDIT | Keycloak must be configured to enforce password complexity by requiring that at least one upper-case character be used."
#  shell: 
#  register: result
#  check_mode: no
#  changed_when: no
#  ignore_errors: yes
#  tags:
#    - cat2
#    - medium
#    - xccdf_hdf_group_KEYC-01-000031
#    - audit
#
#- name: "MEDIUM | xccdf_hdf_group_KEYC-01-000031 | PATCH | Keycloak must be configured to enforce password complexity by requiring that at least one upper-case character be used."
#  shell: 
#  tags:
#    - cat2
#    - medium
#    - xccdf_hdf_group_KEYC-01-000031
#    - patch
#
#- name: "MEDIUM | xccdf_hdf_group_KEYC-01-000032 | AUDIT | Keycloak must be configured to enforce password complexity by requiring that at least one lower-case character be used."
#  shell: 
#  register: result
#  check_mode: no
#  changed_when: no
#  ignore_errors: yes
#  tags:
#    - cat2
#    - medium
#    - xccdf_hdf_group_KEYC-01-000032
#    - audit
#
#- name: "MEDIUM | xccdf_hdf_group_KEYC-01-000032 | PATCH | Keycloak must be configured to enforce password complexity by requiring that at least one lower-case character be used."
#  shell: 
#  tags:
#    - cat2
#    - medium
#    - xccdf_hdf_group_KEYC-01-000032
#    - patch
#
#- name: "MEDIUM | xccdf_hdf_group_KEYC-01-000033 | AUDIT | Keycloak must be configured to enforce password complexity by requiring that at least one numeric character be used."
#  shell: 
#  register: result
#  check_mode: no
#  changed_when: no
#  ignore_errors: yes
#  tags:
#    - cat2
#    - medium
#    - xccdf_hdf_group_KEYC-01-000033
#    - audit
#
#- name: "MEDIUM | xccdf_hdf_group_KEYC-01-000033 | PATCH | Keycloak must be configured to enforce password complexity by requiring that at least one numeric character be used."
#  shell: 
#  tags:
#    - cat2
#    - medium
#    - xccdf_hdf_group_KEYC-01-000033
#    - patch
#
#- name: "MEDIUM | xccdf_hdf_group_KEYC-01-000034 | AUDIT | Keycloak must be configured to enforce password complexity by requiring that at least one special character be used."
#  shell: 
#  register: result
#  check_mode: no
#  changed_when: no
#  ignore_errors: yes
#  tags:
#    - cat2
#    - medium
#    - xccdf_hdf_group_KEYC-01-000034
#    - audit
#
#- name: "MEDIUM | xccdf_hdf_group_KEYC-01-000034 | PATCH | Keycloak must be configured to enforce password complexity by requiring that at least one special character be used."
#  shell: 
#  tags:
#    - cat2
#    - medium
#    - xccdf_hdf_group_KEYC-01-000034
#    - patch
#
#- name: "MEDIUM | xccdf_hdf_group_KEYC-01-000038 | AUDIT | Keycloak must be configured to enforce 24 hours as the minimum password lifetime."
#  shell: 
#  register: result
#  check_mode: no
#  changed_when: no
#  ignore_errors: yes
#  tags:
#    - cat2
#    - medium
#    - xccdf_hdf_group_KEYC-01-000038
#    - audit
#
#- name: "MEDIUM | xccdf_hdf_group_KEYC-01-000038 | PATCH | Keycloak must be configured to enforce 24 hours as the minimum password lifetime."
#  shell: 
#  tags:
#    - cat2
#    - medium
#    - xccdf_hdf_group_KEYC-01-000038
#    - patch
#
#- name: "MEDIUM | xccdf_hdf_group_KEYC-01-000039 | AUDIT | Keycloak must be configured to enforce a 60-day maximum password lifetime restriction."
#  shell: 
#  register: result
#  check_mode: no
#  changed_when: no
#  ignore_errors: yes
#  tags:
#    - cat2
#    - medium
#    - xccdf_hdf_group_KEYC-01-000039
#    - audit
#
#- name: "MEDIUM | xccdf_hdf_group_KEYC-01-000039 | PATCH | Keycloak must be configured to enforce a 60-day maximum password lifetime restriction."
#  shell: 
#  tags:
#    - cat2
#    - medium
#    - xccdf_hdf_group_KEYC-01-000039
#    - patch
#
- name: "MEDIUM | xccdf_hdf_group_KEYC-01-000043 | AUDIT | Keycloak must be configured to map the authenticated identity to the user account for PKI-based authentication."
  block:
    - name: get current browser flows
      shell: >
        {{path}}kcadm.sh get authentication/flows/browser/executions
      register: initial_browser_flows
      ignore_errors: no

    - name: set initial browser flows in json
      set_fact:
        initial_json_browser_flows: "{{ initial_browser_flows.stdout | from_json | community.general.json_query('[*]') }}"

    - debug:
        msg: initial browser flows="{{initial_json_browser_flows}}"

    - name: set initial browser flows' providerIds to array
      set_fact:
        initial_browser_provider_ids: "{{ initial_json_browser_flows | community.general.json_query('[*].providerId') }}"

    - debug:
        msg: "{{initial_browser_provider_ids}}"

    # The following is executed on the condition that ... was not found
    - name: get current authentication flows
      shell: >
        {{path}}kcadm.sh get authentication/flows
      register: initial_flows
      when: '"auth-x509-client-username-form" not in initial_browser_provider_ids'
      ignore_errors: no

    - name: set initial flows in json
      set_fact:
        initial_json_flows: "{{ initial_flows.stdout | from_json | community.general.json_query('[*]') }}"
      when: '"auth-x509-client-username-form" not in initial_browser_provider_ids'

    - debug:
        msg: initial flows="{{initial_json_flows}}"
      when: '"auth-x509-client-username-form" not in initial_browser_provider_ids'

    - name: set initial flows' ids to array
      set_fact:
        initial_ids: "{{ initial_json_flows | community.general.json_query('[*].id') }}"
      when: '"auth-x509-client-username-form" not in initial_browser_provider_ids'

    - debug:
        msg: "{{initial_ids}}"
      when: '"auth-x509-client-username-form" not in initial_browser_provider_ids'

    - name: create a copy of browser authentication flow
      shell: |
        {{path}}kcadm.sh create authentication/flows/browser/copy -s \"providerId\"=\"basic_flow\"
        {{path}}kcadm.sh get authentication/flows
      when: '"auth-x509-client-username-form" not in initial_browser_provider_ids'
      register: new_flows
      check_mode: no
      changed_when: no
      ignore_errors: no

    - name: set new flows in json
      set_fact:
        new_json_flows: "{{ new_flows.stdout | from_json | community.general.json_query('[*]') }}"
      when: '"auth-x509-client-username-form" not in initial_browser_provider_ids'

    - debug:
        msg: "{{new_json_flows}}"
      when: '"auth-x509-client-username-form" not in initial_browser_provider_ids'

    - name: new flows' ids to array
      set_fact:
        new_ids: "{{ new_json_flows | community.general.json_query('[*].id') }}"
      when: '"auth-x509-client-username-form" not in initial_browser_provider_ids'

    - debug:
        msg: "{{new_ids}}"
      when: '"auth-x509-client-username-form" not in initial_browser_provider_ids'

    - name: display authentication flow id differences
      ansible.utils.fact_diff:
        before: "{{initial_ids}}"
        after: "{{new_ids}}"
      when: '"auth-x509-client-username-form" not in initial_browser_provider_ids'

    - debug:
        msg: "new id: {{ new_ids | difference(initial_ids) | list }}"
      when: '"auth-x509-client-username-form" not in initial_browser_provider_ids'

    - name: set variable for new flow id
      set_fact:
        new_id: "{{ new_ids | difference(initial_ids) | list }}"
      when: '"auth-x509-client-username-form" not in initial_browser_provider_ids'

    - name: update new flow's alias
      shell: |
        {{path}}kcadm.sh update authentication/flows/{{new_id.0}} -s \"alias\"=\"flow_alias\"
      ignore_errors: no
      when: '"auth-x509-client-username-form" not in initial_browser_provider_ids'

    - name: update new flow's execution
      shell: |
        {{path}}kcadm.sh create authentication/flows/flow_alias/executions/execution -s \"provider\"=\"auth-x509-client-username-form\"
      ignore_errors: no
      when: '"auth-x509-client-username-form" not in initial_browser_provider_ids'

    - name: get new flows execution
      shell: |
        {{path}}kcadm.sh get authentication/flows/flow_alias/executions
      register: custom_flow
      ignore_errors: no
      when: '"auth-x509-client-username-form" not in initial_browser_provider_ids'

    - name: set new flow in json
      set_fact:
        custom_json_flow: "{{ custom_flow.stdout | from_json | community.general.json_query('[*]') }}"
      when: '"auth-x509-client-username-form" not in initial_browser_provider_ids'

    - debug:
        msg: custom flow="{{custom_json_flow}}"
      when: '"auth-x509-client-username-form" not in initial_browser_provider_ids'

    - name: get x509 execution id
      set_fact:
        loop: "{{ custom_json_flow | community.general.json_query(x509_id_query) }}"
      vars:
        x509_id_query: "[?providerId=='auth-x509-client-username-form'].id"
      register: x509_id
      when: '"auth-x509-client-username-form" not in initial_browser_provider_ids'

    - name: display x509 execution id
      debug:
        var: item
      loop: "{{ custom_json_flow | community.general.json_query(x509_id_query) }}"
      vars:
        x509_id_query: "[?providerId=='auth-x509-client-username-form'].id"
      when: '"auth-x509-client-username-form" not in initial_browser_provider_ids'

  #    - name:
  tags:
    - cat2
    - medium
    - xccdf_hdf_group_KEYC-01-000043
    - audit

#- name: "MEDIUM | xccdf_hdf_group_KEYC-01-000043 | PATCH | Keycloak must be configured to map the authenticated identity to the user account for PKI-based authentication."
#  shell: 
#  tags:
#    - cat2
#    - medium
#    - xccdf_hdf_group_KEYC-01-000043
#    - patch

- name: "MEDIUM | xccdf_hdf_group_KEYC-01-000047_part1 | AUDIT | Keycloak must be configured to notify the system administrators and ISSO when accounts are created."
  shell: >
    {{path}}kcadm.sh update events/config -r {{keycloak_realm}} -s eventsEnabled=true -s 'eventsListeners=["jboss-logging"]'
  register: result
  check_mode: no
  changed_when: no
  ignore_errors: yes
  tags:
    - cat2
    - medium
    - xccdf_hdf_group_KEYC-01-000047
    - audit

- name: "MEDIUM | xccdf_hdf_group_KEYC-01-000047_part2 | AUDIT | Keycloak must be configured to notify the system administrators and ISSO when accounts are created."
  copy:
    src: /tmp/password-min-time-policy-0.0.1.jar
    dest: /opt/keycloak/providers/password-min-time-policy-0.0.1.jar
  tags:
    - cat2
    - medium
    - xccdf_hdf_group_KEYC-01-000047
    - audit

#- name: "MEDIUM | xccdf_hdf_group_KEYC-01-000047 | PATCH | Keycloak must be configured to notify the system administrators and ISSO when accounts are created."
#  shell: 
#  tags:
#    - cat2
#    - medium
#    - xccdf_hdf_group_KEYC-01-000047
#    - patch

- name: "MEDIUM | xccdf_hdf_group_KEYC-01-000048_part1 | AUDIT | Keycloak must be configured to notify the system administrators and ISSO when accounts are modified."
  shell: >
    {{path}}kcadm.sh update events/config -r {{keycloak_realm}} -s eventsEnabled=true -s 'eventsListeners=["jboss-logging"]'
  register: result
  check_mode: no
  changed_when: no
  ignore_errors: yes
  tags:
    - cat2
    - medium
    - xccdf_hdf_group_KEYC-01-000048
    - audit

- name: "MEDIUM | xccdf_hdf_group_KEYC-01-000048_part2 | AUDIT | Keycloak must be configured to notify the system administrators and ISSO when accounts are modified."
  copy:
    src: /tmp/password-min-time-policy-0.0.1.jar
    dest: /opt/keycloak/providers/password-min-time-policy-0.0.1.jar
  tags:
    - cat2
    - medium
    - xccdf_hdf_group_KEYC-01-000048
    - audit

#- name: "MEDIUM | xccdf_hdf_group_KEYC-01-000048 | PATCH | Keycloak must be configured to notify the system administrators and ISSO when accounts are modified."
#  shell: 
#  tags:
#    - cat2
#    - medium
#    - xccdf_hdf_group_KEYC-01-000048
#    - patch

- name: "MEDIUM | xccdf_hdf_group_KEYC-01-000049_part1 | AUDIT | Keycloak must be configured to notify the system administrators and ISSO for account disabling actions."
  shell: >
    {{path}}kcadm.sh update events/config -r {{keycloak_realm}} -s eventsEnabled=true -s 'eventsListeners=["jboss-logging"]'
  register: result
  check_mode: no
  changed_when: no
  ignore_errors: yes
  tags:
    - cat2
    - medium
    - xccdf_hdf_group_KEYC-01-000049
    - audit

- name: "MEDIUM | xccdf_hdf_group_KEYC-01-000049_part2 | AUDIT | Keycloak must be configured to notify the system administrators and ISSO for account disabling actions."
  copy:
    src: /tmp/password-min-time-policy-0.0.1.jar
    dest: /opt/keycloak/providers/password-min-time-policy-0.0.1.jar
  tags:
    - cat2
    - medium
    - xccdf_hdf_group_KEYC-01-000049
    - audit

#- name: "MEDIUM | xccdf_hdf_group_KEYC-01-000049 | PATCH | Keycloak must be configured to notify the system administrators and ISSO for account disabling actions."
#  shell: 
#  tags:
#    - cat2
#    - medium
#    - xccdf_hdf_group_KEYC-01-000049
#    - patch

- name: "MEDIUM | xccdf_hdf_group_KEYC-01-000050_part1 | AUDIT | Keycloak must be configured to notify the system administrators and ISSO for account removal actions."
  shell: >
    {{path}}kcadm.sh update events/config -r {{keycloak_realm}} -s eventsEnabled=true -s 'eventsListeners=["jboss-logging"]'
  register: result
  check_mode: no
  changed_when: no
  ignore_errors: yes
  tags:
    - cat2
    - medium
    - xccdf_hdf_group_KEYC-01-000050
    - audit

- name: "MEDIUM | xccdf_hdf_group_KEYC-01-000050_part2 | AUDIT | Keycloak must be configured to notify the system administrators and ISSO for account removal actions."
  copy:
    src: /tmp/password-min-time-policy-0.0.1.jar
    dest: /opt/keycloak/providers/password-min-time-policy-0.0.1.jar
  tags:
    - cat2
    - medium
    - xccdf_hdf_group_KEYC-01-000050
    - audit

#- name: "MEDIUM | xccdf_hdf_group_KEYC-01-000050 | PATCH | Keycloak must be configured to notify the system administrators and ISSO for account removal actions."
#  shell: 
#  tags:
#    - cat2
#    - medium
#    - xccdf_hdf_group_KEYC-01-000050
#    - patch

- name: "MEDIUM | xccdf_hdf_group_KEYC-01-000051 | AUDIT | Keycloak must be configured to automatically audit account enabling actions."
  shell: >
    {{path}}kcadm.sh update events/config -r {{keycloak_realm}} -s adminEventsEnabled=true
    -s adminEventsDetailsEnabled=true
  register: result
  check_mode: no
  changed_when: no
  ignore_errors: yes
  tags:
    - cat2
    - medium
    - xccdf_hdf_group_KEYC-01-000051
    - audit

#- name: "MEDIUM | xccdf_hdf_group_KEYC-01-000051 | PATCH | Keycloak must be configured to automatically audit account enabling actions."
#  shell: 
#  tags:
#    - cat2
#    - medium
#    - xccdf_hdf_group_KEYC-01-000051
#    - patch

- name: "MEDIUM | xccdf_hdf_group_KEYC-01-000052 | AUDIT | Keycloak must be configured to notify system administrators and ISSO of account enabling actions."
  shell: >
    {{path}}kcadm.sh update events/config -r {{keycloak_realm}} -s eventsEnabled=true -s 'eventsListeners={{events_listeners_string}}'
  register: result
  check_mode: no
  changed_when: no
  ignore_errors: yes
  tags:
    - cat2
    - medium
    - xccdf_hdf_group_KEYC-01-000052
    - audit

#- name: "MEDIUM | xccdf_hdf_group_KEYC-01-000052 | PATCH | Keycloak must be configured to notify system administrators and ISSO of account enabling actions."
#  shell: 
#  tags:
#    - cat2
#    - medium
#    - xccdf_hdf_group_KEYC-01-000052
#    - patch

- name: "MEDIUM | xccdf_hdf_group_KEYC-01-000054 | AUDIT | Keycloak must be configured to maintain locks on user accounts until released by an administrator."
  shell: |
    {{path}}kcadm.sh update realms/{{keycloak_realm}} -s 'bruteForceProtected=true'
    {{path}}kcadm.sh update realms/{{keycloak_realm}} -s 'permanentLockout=true'
  register: result
  check_mode: no
  changed_when: no
  ignore_errors: yes
  tags:
    - cat2
    - medium
    - xccdf_hdf_group_KEYC-01-000054
    - audit

#- name: "MEDIUM | xccdf_hdf_group_KEYC-01-000054 | PATCH | Keycloak must be configured to maintain locks on user accounts until released by an administrator."
#  shell: 
#  tags:
#    - cat2
#    - medium
#    - xccdf_hdf_group_KEYC-01-000054
#    - patch

- name: "MEDIUM | xccdf_hdf_group_KEYC-01-000055_part1 | AUDIT | Keycloak must be configured to send audit records to a centralized audit server."
  shell: >
    {{path}}kcadm.sh update events/config -r {{keycloak_realm}} -s eventsEnabled=true -s 'eventsListeners=["jboss-logging"]'
    -s 'enabledEventTypes={{enabled_event_types_string}}'
  register: result
  check_mode: no
  changed_when: no
  ignore_errors: yes
  tags:
    - cat2
    - medium
    - xccdf_hdf_group_KEYC-01-000055
    - audit

- name: "MEDIUM | xccdf_hdf_group_KEYC-01-000055_part2 | AUDIT | Keycloak must be configured to send audit records to a centralized audit server."
  blockinfile:
    path: /opt/keycloak/conf/keycloak.conf
    block: |
      spi-events-listener-jboss-logging-success-level=info
      spi-events-listener-jboss-logging-error-level=error
    state: present
    create: yes
    marker: "# {mark} ANSIBLE MANAGED BLOCK - SPI EVENTS"
  register: result
  check_mode: no
  changed_when: no
  ignore_errors: yes
  tags:
    - cat2
    - medium
    - xccdf_hdf_group_KEYC-01-000055
    - audit

- name: "MEDIUM | xccdf_hdf_group_KEYC-01-000055_part3 | AUDIT | Keycloak must be configured to send audit records to a centralized audit server."
  blockinfile:
    path: /opt/keycloak/conf/quarkus.properties
    block: |
      quarkus.log.syslog.enable=true
      quarkus.log.syslog.endpoint={{quarkus_endpoint}}
      quarkus.log.syslog.protocol={{quarkus_protocol}}
    state: present
    create: yes
    marker: "# {mark} ANSIBLE MANAGED BLOCK - QUARKUS"
  register: result
  check_mode: no
  changed_when: no
  ignore_errors: yes
  tags:
    - cat2
    - medium
    - xccdf_hdf_group_KEYC-01-000055
    - audit

#- name: "MEDIUM | xccdf_hdf_group_KEYC-01-000055 | PATCH | Keycloak must be configured to send audit records to a centralized audit server."
#  shell: 
#  tags:
#    - cat2
#    - medium
#    - xccdf_hdf_group_KEYC-01-000055
#    - patch

- name: "MEDIUM | xccdf_hdf_group_KEYC-01-000056_part1 | AUDIT | Keycloak must be configured to use or map to Coordinated Universal Time (UTC) to record time stamps for audit records."
  shell: >
    {{path}}kcadm.sh update events/config -r {{keycloak_realm}} -s adminEventsEnabled=true 
    -s adminEventsDetailsEnabled=true -s eventsEnabled=true -s 'eventsListeners=["jboss-logging"]'
    -s 'enabledEventTypes={{enabled_event_types_string}}'
  register: result
  check_mode: no
  changed_when: no
  ignore_errors: yes
  tags:
    - cat2
    - medium
    - xccdf_hdf_group_KEYC-01-000056
    - audit

- name: "MEDIUM | xccdf_hdf_group_KEYC-01-000056_part2 | AUDIT | Keycloak must be configured to use or map to Coordinated Universal Time (UTC) to record time stamps for audit records."
  blockinfile:
    path: /opt/keycloak/conf/keycloak.conf
    block: |
      spi-events-listener-jboss-logging-success-level=info
      spi-events-listener-jboss-logging-error-level=error
    state: present
    create: yes
    marker: "# {mark} ANSIBLE MANAGED BLOCK - SPI EVENTS"
  register: result
  check_mode: no
  changed_when: no
  ignore_errors: yes
  tags:
    - cat2
    - medium
    - xccdf_hdf_group_KEYC-01-000056
    - audit

- name: "MEDIUM | xccdf_hdf_group_KEYC-01-000056_part3 | AUDIT | Keycloak must be configured to use or map to Coordinated Universal Time (UTC) to record time stamps for audit records."
  blockinfile:
    path: /opt/keycloak/conf/quarkus.properties
    block: |
      quarkus.log.syslog.enable=true
      quarkus.log.syslog.endpoint={{quarkus_endpoint}}
      quarkus.log.syslog.protocol={{quarkus_protocol}}
      quarkus.log.syslog.format={{quarkus_format}}
    state: present
    create: yes
    marker: "# {mark} ANSIBLE MANAGED BLOCK - QUARKUS"
  register: result
  check_mode: no
  changed_when: no
  ignore_errors: yes
  tags:
    - cat2
    - medium
    - xccdf_hdf_group_KEYC-01-000056
    - audit

#- name: "MEDIUM | xccdf_hdf_group_KEYC-01-000056 | PATCH | Keycloak must be configured to use or map to Coordinated Universal Time (UTC) to record time stamps for audit records."
#  shell: 
#  tags:
#    - cat2
#    - medium
#    - xccdf_hdf_group_KEYC-01-000056
#    - patch

- name: "MEDIUM | xccdf_hdf_group_KEYC-01-000057_part1 | AUDIT | Keycloak must be configured with a minimum granularity of one second to record time stamps for audit records."
  shell: >
    {{path}}kcadm.sh update events/config -r {{keycloak_realm}} -s adminEventsEnabled=true 
    -s adminEventsDetailsEnabled=true -s eventsEnabled=true -s 'eventsListeners=["jboss-logging"]'
    -s 'enabledEventTypes={{enabled_event_types_string}}'
  register: result
  check_mode: no
  changed_when: no
  ignore_errors: yes
  tags:
    - cat2
    - medium
    - xccdf_hdf_group_KEYC-01-000057
    - audit

- name: "MEDIUM | xccdf_hdf_group_KEYC-01-000057_part2 | AUDIT | Keycloak must be configured with a minimum granularity of one second to record time stamps for audit records."
  blockinfile:
    path: /opt/keycloak/conf/keycloak.conf
    block: |
      spi-events-listener-jboss-logging-success-level=info
      spi-events-listener-jboss-logging-error-level=error
    state: present
    create: yes
    marker: "# {mark} ANSIBLE MANAGED BLOCK - SPI EVENTS"
  register: result
  check_mode: no
  changed_when: no
  ignore_errors: yes
  tags:
    - cat2
    - medium
    - xccdf_hdf_group_KEYC-01-000057
    - audit

- name: "MEDIUM | xccdf_hdf_group_KEYC-01-000057_part3 | AUDIT | Keycloak must be configured with a minimum granularity of one second to record time stamps for audit records."
  lineinfile:
    path: /opt/keycloak/conf/keycloak.conf
    regexp: '^log-console-format'
    line: log-console-format={{log_console_format}}
    state: present
    create: yes
  register: result
  check_mode: no
  changed_when: no
  ignore_errors: yes
  tags:
    - cat2
    - medium
    - xccdf_hdf_group_KEYC-01-000057
    - audit

#- name: "MEDIUM | xccdf_hdf_group_KEYC-01-000057 | PATCH | Keycloak must be configured with a minimum granularity of one second to record time stamps for audit records."
#  shell: 
#  tags:
#    - cat2
#    - medium
#    - xccdf_hdf_group_KEYC-01-000057
#    - patch
#
#- name: "MEDIUM | xccdf_hdf_group_KEYC-01-000059 | AUDIT | Keycloak must be configured to allow the use of a temporary password at initial logon with an immediate change to a permanent password."
#  shell: 
#  register: result
#  check_mode: no
#  changed_when: no
#  ignore_errors: yes
#  tags:
#    - cat2
#    - medium
#    - xccdf_hdf_group_KEYC-01-000059
#    - audit
#
#- name: "MEDIUM | xccdf_hdf_group_KEYC-01-000059 | PATCH | Keycloak must be configured to allow the use of a temporary password at initial logon with an immediate change to a permanent password."
#  shell: 
#  tags:
#    - cat2
#    - medium
#    - xccdf_hdf_group_KEYC-01-000059
#    - patch
#
#- name: "MEDIUM | xccdf_hdf_group_KEYC-01-000064 | AUDIT | AAA Services must not be configured with shared accounts."
#  shell:
#  register: result
#  check_mode: no
#  changed_when: no
#  ignore_errors: yes
#  tags:
#    - cat2
#    - medium
#    - xccdf_hdf_group_KEYC-01-000064
#    - audit
#
#- name: "MEDIUM | xccdf_hdf_group_KEYC-01-000064 | PATCH | AAA Services must not be configured with shared accounts."
#  shell: 
#  tags:
#    - cat2
#    - medium
#    - xccdf_hdf_group_KEYC-01-000064
#    - patch
#
