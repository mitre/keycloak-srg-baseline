- name: Set Up
  block:
    - name: Sign in as admin
      shell: "{{keycloak_home}}/bin/kcadm.sh config credentials --server http://localhost:8080 --realm master --user admin --password admin"
      register: signin

- name: Zscaler (shakes fist at sky)
  block:
    - name: copy cert
      copy:
        src: ZScaler_Root.crt
        dest: /
    - name: trust new cert
      shell: >
        trust anchor /ZScaler_Root.crt
  tags:
  - jar_stuff
      
#    - name: Print all available facts
#      ansible.builtin.debug:
#        var: ansible_facts

- name: pull jar
  block:
    - name: fetch jar from github
      ansible.builtin.get_url:
        url: "{{jarfile_url}}"
        dest: /tmp/password-min-time-policy-0.0.1.jar
        # headers:
        #   Accept: application/vnd.github+json
        #   Authorization: "Bearer {{github_pat}}"
      # delegate_to: localhost

      vars:
        - jarfile_url: https://mitre.github.io/keycloak-custom-policies/assets/password-min-time-policy-current.jar
  tags:
    - jar_stuff

#- name: Upgrade pip
#  command: "{{ target_python_path }} -m pip install --upgrade pip"
- name: Upgrade pip
  package:
    use: pip
    name: pip
    state: latest
#  ansible.builtin.pip:
#    name: pip
#    state: present
#    extra_args: --upgrade
#    executable: /usr/local/bin/pip
  tags: test
#  vars:
#    ansible_python_interpreter: /usr/libexec/platform-python3.6

- name: Install pip dependencies
  ansible.builtin.pip:
    name:
      - setuptools
      - virtualenv
      - cryptography
    state: present
  tags: test

- name: Install package dependencies
  ansible.builtin.package:
   name: "{{ package_dependencies }}"
   state: present
  tags: test
  when: not is_container

# the packages module does not work with microdnf, so use command
- name: Install package dependencies (microdnf)
  command: microdnf install {{ package_dependencies | join(" ") }}

- name: Copy Over HTTPS Certificate
  block:
    - name: Copy SSL Certificate
      copy:
        src: "{{https_certificate_files}}"
        dest: "{{https_certificate_files_path}}"

    - name: Copy SSL Key Certificate
      copy:
        src: "{{https_certificate_key_files}}"
        dest: "{{https_certificate_key_files_path}}"
  when: not generate_certificates
  tags: test

- name: Generate a Self Signed OpenSSL certificate
  block:
    - debug: msg="WARNING! Ansible is creating a self-signed certificate for Keycloak. This should not be done in production."
    - name: Create private key (RSA, 4096 bits)
      community.crypto.openssl_privatekey:
        path: "{{ https_certificate_key_files_path }}"
    - name: Create certificate signing request (CSR) for self-signed certificate
      community.crypto.openssl_csr_pipe:
        privatekey_path: "{{ https_certificate_key_files_path }}"
        common_name: "{{ certificate_common_name }}"
        organization_name: "{{ certificate_organization_name }}"
#        subject_alt_name: "{{certificate_subject_alt_names}}"
        country_name: "{{ certificate_country_name }}"
        organizational_unit_name: "{{ certificate_organizational_unit }}"
      register: csr

    - name: Create self-signed certificate from CSR
      community.crypto.x509_certificate:
        path: "{{https_certificate_files_path}}"
        csr_content: "{{ csr.csr }}"
        privatekey_path: "{{https_certificate_key_files_path}}"
        provider: selfsigned
  when: generate_certificates
  tags: test

- name: Set perms on cert files
  file:
    path: "{{ item }}"
    owner: root
    group: root
    mode: '0640'
  loop: 
    - "{{ https_certificate_files_path }}"
    - "{{ https_certificate_key_files_path }}"

- name: Set up TrustStore
  block:
    - name: Obtain Certificate
      ansible.builtin.get_url:
        url: "{{dod_certificate_url}}"
        dest: "{{keycloak_home}}/cert.zip"

    - name: Un-compress Certificate Archive
      ansible.builtin.unarchive:
        src: "{{keycloak_home}}/cert.zip"
        dest: "{{keycloak_home}}"
        remote_src: yes

    - name: Prepare Certificate
      shell: >
        openssl pkcs7 -in {{keycloak_home}}/Certificates_PKCS7_*/*.pem.p7b -print_certs -out {{keycloak_home}}/DoD_CAs.pem

    - name: Obtain Certificate
      java_cert:
        cert_path: "{{keycloak_home}}/DoD_CAs.pem"
        keystore_path: "{{spi_trust_store_file_path}}"
        keystore_pass: "{{spi_trust_store_password}}"
        keystore_create: true
        state: present
        cert_alias: DoD_CAs
        trust_cacert: true
#    - name:
  tags:
    - testTrustStore