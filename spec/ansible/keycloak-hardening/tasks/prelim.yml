---
- name: Set Up
  block:
    - name: Sign in as admin
      ansible.builtin.shell: "{{ keycloak_home }}/bin/kcadm.sh config credentials --server {{ keycloak_server_address }} --realm {{ keycloak_realm }} --user {{ keycloak_admin_user }} --password {{ keycloak_admin_password }}"
      register: signin
  tags:
    - cert_config

- name: Upgrade pip
  ansible.builtin.command: "{{ target_python_path }} -m pip install --upgrade pip"
  tags:
    - cert_config
# - name: Upgrade pip
#   package:
#     use: pip
#     name: pip
#     state: latest
#   tags: test

- name: Install pip dependencies
  ansible.builtin.pip:
    name: "{{ pip_dependencies }}"
    state: present
  tags:
    - cert_config

- name: Install package dependencies
  ansible.builtin.package:
    name: "{{ package_dependencies }}"
    state: present
  tags: test
  when: not is_container

# the packages module does not work with microdnf, so use command
- name: Install package dependencies (microdnf)
  ansible.builtin.command: microdnf install {{ package_dependencies | join(" ") }}
  tags:
    - cert_config
- name: Copy Over HTTPS Certificate
  block:
    - name: Copy SSL Certificate
      ansible.builtin.copy:
        src: "{{ https_certificate_files }}"
        dest: "{{ https_certificate_files_path }}"

    - name: Copy SSL Key Certificate
      ansible.builtin.copy:
        src: "{{ https_certificate_key_files }}"
        dest: "{{ https_certificate_key_files_path }}"
  when: not generate_certificates
  tags:
    - cert_config

- name: Generate a Self Signed OpenSSL certificate
  block:
    - ansible.builtin.debug: msg="WARNING! Ansible is creating a self-signed certificate for Keycloak. This should not be done in production."
    - name: Create private key (RSA, 4096 bits)
      community.crypto.openssl_privatekey:
        path: "{{ https_certificate_key_files_path }}"
    - name: Create certificate signing request (CSR) for self-signed certificate
      community.crypto.openssl_csr_pipe:
        privatekey_path: "{{ https_certificate_key_files_path }}"
        common_name: "{{ certificate_common_name }}"
        organization_name: "{{ certificate_organization_name }}"
        #        subject_alt_name: "{{ certificate_subject_alt_names }}"
        country_name: "{{ certificate_country_name }}"
        organizational_unit_name: "{{ certificate_organizational_unit }}"
      register: csr

    - name: Create self-signed certificate from CSR
      community.crypto.x509_certificate:
        path: "{{ https_certificate_files_path }}"
        csr_content: "{{ csr.csr }}"
        privatekey_path: "{{ https_certificate_key_files_path }}"
        provider: selfsigned
  when: generate_certificates
  tags:
    - cert_config

- name: Set perms on cert files
  ansible.builtin.file:
    path: "{{ item }}"
    owner: root
    group: root
    mode: "0640"
  loop:
    - "{{ https_certificate_files_path }}"
    - "{{ https_certificate_key_files_path }}"
  tags:
    - cert_config

- name: Set up TrustStore
  block:
    - name: Obtain Certificate
      ansible.builtin.get_url:
        url: "{{ dod_certificate_url }}"
        dest: "{{ keycloak_home }}/cert.zip"

    - name: Un-compress Certificate Archive
      ansible.builtin.unarchive:
        src: "{{ keycloak_home }}/cert.zip"
        dest: "{{ keycloak_home }}"
        remote_src: true
    
    # Hedging against the filename of the zip download changing
    - name: Register DoD certificates working directory path
      ansible.builtin.shell: |
        cd {{ keycloak_home }}/Certificates_PKCS7_*
        pwd
      register: keycloak_dod_cert_directory_path

    - name: Convert DoD p7b archive to a PEM archive
      ansible.builtin.shell: |
        cd {{ keycloak_dod_cert_directory_path.stdout }}
        openssl pkcs7 -in *.pem.p7b -print_certs -out DoD_CA_Chain.pem
    
    - name: Split the PEM archive into individual keyfiles
      ansible.builtin.shell: |
        cd {{ keycloak_dod_cert_directory_path.stdout }}
        csplit DoD_CA_Chain.pem /"-----END CERTIFICATE-----"/+1 "{100}" -k -s -f "DoD_CA_File"
        chmod 400 
      ignore_errors: true
    
    - name: Generate list of keyfiles
      ansible.builtin.find:
        paths: "{{ keycloak_dod_cert_directory_path.stdout }}"
        patterns: "DoD_CA_File*"
      register: dod_ca_files

    - name: Configure spi Certificate
      community.general.java_cert:
        cert_path: "{{ item.path }}"
        keystore_path: "{{ spi_trust_store_file_path }}"
        keystore_pass: "{{ spi_trust_store_password }}"
        keystore_create: true
        state: present
        cert_alias: "{{ item.path }}"
        trust_cacert: true
      with_items: "{{ dod_ca_files.files }}"
      ignore_errors: true
  tags:
    - cert_config
    - dod_cert

- name: Pull custom-event-listener
  community.general.maven_artifact:
    group_id: io.github.mitre
    artifact_id: custom-event-listener
    version: 0.0.1
    dest: /tmp/password-min-time-policy-0.0.1.jar
  tags:
    - test

- name: Display current realm information or failure message
  block:
    - name: Collect current realm information
      community.general.keycloak_realm:
        auth_keycloak_url: "{{ keycloak_server_address }}"
        auth_client_id: "{{ keycloak_client_id }}"
        realm: "{{ keycloak_realm }}"
        auth_realm: "{{ keycloak_realm }}"
        auth_username: "{{ keycloak_admin_user }}"
        auth_password: "{{ keycloak_admin_password }}"
      register: realm_config
#      ignore_errors: true

    - name: Display failure message
      fail:
        msg: "ERROR: Realm information not found. Check your connection variables."
      when: realm_config.failed

    - name: Display current realm information
      debug:
        msg: "{{ realm_config }}"
  tags:
    - fail

- name: Set enabled_event_types_list, events_listeners_list, and password_policy_string variables
  block:
    - name: Collect enabled events types and events listeners lists
      ansible.builtin.set_fact:
        enabled_event_types_list: "{{ realm_config.existing.enabledEventTypes }}"
        events_listeners_list: "{{ realm_config.existing.eventsListeners }}"

    - name: Collect password policy string
      ansible.builtin.set_fact:
        password_policy_string: "{{ realm_config.existing.passwordPolicy }}"
      when: realm_config.existing.passwordPolicy is defined

    - name: Create password policy string
      ansible.builtin.set_fact:
        password_policy_string: ""
      when: realm_config.existing.passwordPolicy is not defined
